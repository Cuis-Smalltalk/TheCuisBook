@c Solutions to the exercises
@node Solutions to the Exercises
@appendix Solutions to the Exercises


@menu
* Preface (Solutions)::
* Smallltalk Philosophy (Solutions)::
* The Message Way of Life (Solutions)::
* Class -- model of Communicating Entities (Solutions)::
* The Collection Way of Life (Solutions)::
* Control Flow Messaging (Solutions)::
* Visual with Morph (Solutions)::
* The Fundamentals of Morph (Solutions)::
* Events (Solutions)::
* Code Management (Solutions)::
@end menu


@c Preface

@node Preface (Solutions)
@unnumberedsec Preface
@subheading @ref{exerciseExample} 
In the seventies, four versions were developed: Smalltalk-71,
Smalltalk-72, Smalltalk-76 and Smalltalk-80.

@c Chapter 1
@node Smallltalk Philosophy (Solutions)
@unnumberedsec Smallltalk Philosophy
@subheading @ref{exePlacement}
@figure{Placement,E-img1,8}

@subheading @ref{concatenateUppercase}
@smallexample
Transcript show: 'Hello ', 'my beloved ' asUppercase, 'friend'
@end smallexample


@subheading @ref{inverseSum}
@smallexample
1 + (1/2) + (1/3) + (1/4)
@result{} 25/12 
@end smallexample

@subheading @ref{capWordNumber}
Several messages can be sent one after the other:
@smallexample
Transcript show: 2020 printStringWords capitalized 
@end smallexample

@c Chapter 2
@node The Message Way of Life (Solutions)
@unnumberedsec The Message Way of Life
@subheading @ref{helloBelle}
@smallexample
'Hello' 
   at: 1 put: $B;
   at: 2 put: $e;
   at: 3 put: $l;
   at: 4 put: $l;
   at: 5 put: $e;
   yourself
@end smallexample

@subheading @ref{squaredSum}
@smallexample
1 + (1/2) squared + (1/3) squared + (1/4) squared
@result{}  205 / 144
@end smallexample

@subheading @ref{stringArith}
From a System Browser, do from the left panel to the
right ...@clicksequence{@option{Kernel-Text} @click{} @class{String}
@click{} @smalltalk{arithmetic}}... the count of methods in the last
right panel is 6: @method{*}, @method{+}, @method{-}, @method{/},
@method{//} and @method{\\}.

@c Chapter 3
@node Class -- model of Communicating Entities (Solutions)
@unnumberedsec Class, model of Communicating Entities
@subheading @ref{floatInfo}
When the @class{Float} is selected, the wide text pane prints: ``class
definition for Float @textdegree{} 92 instance methods @textdegree{}
34 class methods @textdegree{} 1280 total lines of code''

@subheading @ref{cosTable}
@smallexample
0 to: Float twoPi by: 1/10 do: [:i |
   Transcript show: i cos; cr]
@end smallexample

@subheading @ref{multiplyBy1024}
1024 is not a random number. It is 2@sup{10} then written in base 2 :
10000000000, it is also @smalltalk{1 << 10}:

@smallexample
2@return{}10 @result{} 1024
1024 printStringBase: 2 @result{} '10000000000'
1 << 10 @result{} 1024 
@end smallexample

Therefore, to multiply an integer by 1024, we shift left of 10 its digits:

@smallexample
360 << 10 @result{} 368640 
360 * 1024 @result{} 368640 
@end smallexample

@subheading @ref{exeFloatPrecision}
@smallexample
5.2 + 0.9  - 6.1
@result{} 8.881784197001252e-16

5.2 + 0.7 + 0.11
@result{} 6.010000000000001

1.2 * 3  - 3.6
@result{} -4.440892098500626e-16
@end smallexample

@subheading @ref{exeZeroDivide}
The system returns the error @smalltalk{ZeroDivide}, division by zero.

@subheading @ref{exeFractionPrecision}
@smallexample
(52/10) + (9/10)  - (61/10)
@result{} 0

(52/10) + (7/10)  + (11/100)
@result{} 601/100 soit 6.01

(12/10) * 3  - (36/10)
@result{} 0
@end smallexample

@subheading @ref{selectApples}
There are different options, with slightly different results:
@smallexample
'There are 12 apples' select: [:i |i isLetter].
@result{} 'Thereareapples' 
@end smallexample

Not really satisfying. So another option:
@smallexample
'There are 12 apples' select: [:i |i isDigit not].
@result{} 'There are  apples'
@end smallexample

Or even a shorter option with the @msg{reject:} message:
@smallexample
'There are 12 apples' reject: [:i |i isDigit].
@result{} 'There are  apples' 
@end smallexample

@subheading @ref{formatString}
In @class{String}, search for the method category @option{format}, there
you find the @method{format:} method:
@smallexample
'Joe bought @{1@} apples and @{2@} oranges' format: #(5 4)
@result{}  'Joe bought 5 apples and 4 oranges' 
@end smallexample



@subheading @ref{spacewarVar}
The @class{SpaceWar}, @class{CentralStar} and @class{SpaceShip}
definitions with their added instance variable should look like:
@smallexample
Object subclass: #SpaceWar
   instanceVariableNames: 'centralStar ships torpedoes'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

Object subclass: #CentralStar
   instanceVariableNames: 'mass'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

Object subclass: #SpaceShip
   instanceVariableNames: 'position heading velocity
      fuel torpedoes mass acceleration'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
@end smallexample

@subheading @ref{spaceShipGetters}
@smallexample
SpaceShip>>position
   @return{} position

SpaceShip>>velocity
   @return{} position

SpaceShip>>mass
   @return{} mass
@end smallexample

@subheading @ref{spaceShipSetters}
@smallexample
SpaceShip>>position: aPoint
   position @assign{} aPoint

SpaceShip>>velocity: aPoint
   velocity @assign{} aPoint

Torpedo>>heading: aFloat
   heading @assign{} aFloat
@end smallexample

@subheading @ref{shipHeading}
@smallexample
SpaceShip>>left
"Rotate the ship to its left"
   heading @assign{} heading + 0.1

SpaceShip>>right
"Rotate the ship to its right"
   heading @assign{} heading - 0.1
@end smallexample

@subheading @ref{shipAcceleration}
@smallexample
SpaceShip>>push
"Init an acceleration boost"
   acceleration @assign{} 10

SpaceShip>>unpush
"Stop the acceleration boost"
   acceleration @assign{} 0
@end smallexample


@subheading @ref{initCentralStar}
@smallexample
CentralStar>>initialize
   super initialize.
   mass @assign{} 8000.
@end smallexample


@c Chapter 4
@node The Collection Way of Life (Solutions)
@unnumberedsec The Collection Way of Life
@subheading @ref{cutString}
Open the protocol browser on the class @class{String}, search for the
method @method{allButFirst:} implemented in
@class{SequenceableCollection}. Read its comment in its source code.
@smallexample
'Hello My Friend' allButFirst: 6
@result{} 'My Friend'
@end smallexample

@subheading @ref{exeNegativeIntegers}
@smallexample
(-80 to: 50) asArray
@end smallexample

@subheading @ref{holeSet}
@smallexample
(1 to: 100) difference: (25 to: 75)
@result{} #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
22 23 24 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
92 93 94 95 96 97 98 99 100) 
@end smallexample

@subheading @ref{oddNumbers}
@smallexample
(-20 to: 45) select: [:z | z odd]
@end smallexample

@subheading @ref{qtyPrime200}
@smallexample
((101 to: 200) select: [:n | n isPrime]) size
@result{} 21 
@end smallexample

@subheading @ref{multiples7}
@smallexample
(1 to: 100) select:[:n | n isDivisibleBy: 7]
@result{} #(7 14 21 28 35 42 49 56 63 70 77 84 91 98) 
@end smallexample

@subheading @ref{oddNonPrime}
This solution, based on set operations and multiple use of the
@msg{select:} message, is mostly compatible with the knowledge
acquired at this point of the book.
@smallexample
| primeNumbers nonPrimeNumbers |
primeNumbers @assign{} (1 to: 100) select: [:n | n isPrime].
nonPrimeNumbers @assign{} (1 to: 100) difference: primeNumbers.
nonPrimeNumbers select: [:n | n odd]
@result{} #(1 9 15 21 25 27 33 35 39 45 49 51 55 57 63 65 69 75
77 81 85 87 91 93 95 99) 
@end smallexample

A shorter solution with logical operations we have not discussed so
far:
@smallexample
(1 to: 100) select:[:n | n isPrime not and: [n odd]]
@end smallexample

@subheading @ref{decodeCipher}
@smallexample
'Zpv!bsf!b!cptt' collect: [:c |
   (c asciiValue - 1) asCharacter]
@result{} 'You are a boss' 
@end smallexample

@subheading @ref{alphabetCipher}
@smallexample
($A to: $Z) collect: [:c |
   (c asciiValue - 65 + 3 \\ 26 + 65) asCharacter]
@end smallexample

Each character from A to Z is referenced by the @smalltalk{c} block
parameter and converted to its Ascii
value@footnote{@url{https://en.wikipedia.org/wiki/ASCII}}:
@smalltalk{c asciiValue}. It is shifted of 65, so the A character
counts as 0 and Z as 25 in the alphabet list. To apply the Caesar
cipher, we send the message @smalltalk{+ 3} to the previous result.

We are almost good, only the characters X, Y, Z will overflow the
alphabet, indeed these characters will be ciphered as 26, 27, 28. To
fix that we send @smalltalk{\\ 26} to the previous result, it is an
old trick of programming: the reminder of the Euclidean division by 26
frames the value between 0 and 25@footnote{It generalizes to the
mathematics field of modular arithmetic,
@url{https://www.wikiwand.com/en/Modular_arithmetic}}.

Finally we shift back of 65 before converting from the Ascii value to
the character.


@subheading @ref{encodeCaesar}
In the solution of @ref{alphabetCipher}, we just need to replace the
characters interval with a string:
@smallexample
'SMALLTALKEXPRESSION' collect: [:c |
   (c asciiValue - 65 + 3 \\ 26 + 65) asCharacter]
@result{} 'VPDOOWDONHASUHVVLRQ' 
@end smallexample

@subheading @ref{decodeCaesar}
@smallexample
  'DOHDMDFWDHVW' collect: [:c |
    (c asciiValue - 65 - 3 \\ 26 + 65) asCharacter]
@result{} 'ALEAJACTAEST'
@end smallexample

@subheading @ref{collFirst}
The appropriate message is @msg{first:}, defined in the parent
class @class{SequenceableCollection}. You need to use the protocol or
hierarchy browser on @class{Array} to discover it:

@smallexample
array1 first: 2
@result{} #(2 'Apple') 
@end smallexample

@subheading @ref{fillArray}
You could simply do a thumb:

@smallexample
array1 at: 1 put: 'kiwi'.
array1 at: 2 put: 'kiwi'.
array1 at: 3 put: 'kiwi'.
array1 at: 4 put: 'kiwi'.
@end smallexample

Or even a bit less thumb:

@smallexample
1 to: array1 size do: [:index |
   array1 at: index put: 'kiwi']
@end smallexample

But if you search for carefully the @class{Array} protocol, you can
just do:

@smallexample
array1 atAllPut: 'kiwi'.
@end smallexample

@subheading @ref{addAfter}
In the @class{OrderedCollection} protocol search for the method
@method{add:after:}.
@smallexample
coll1 @assign{} @{2 . 'Apple' . 2@@1 . 1/3 @} asOrderedCollection .		
coll1 add: 'Orange' after: 'Apple'; yourself.
@result{}  an OrderedCollection(2 'Apple' 'Orange' 2@@1 1/3) 
@end smallexample

@subheading @ref{setLetters}
@smallexample
Set  new
   addAll: 'buenos d@'{@dotless{i}}as';
   addAll: 'bonjour';
   yourself.
@result{}  a Set($e $j $o $a $u $b $  $@'{@dotless{i}} $r $d $n $s) 
@end smallexample

@subheading @ref{nameColor}
@smallexample
colors keysDo: [:key |
   colors at: key put: key asString capitalized].
colors
@result{} a Dictionary(#blue->'Blue' #green->'Green' #red->'Red'
#yellow->'Yellow' ) 
@end smallexample

@subheading @ref{initActorsCollections}
When the game starts there is no fired torpedoes, therefore
@smalltalk{torpedoes} is an empty @class{OrderedCollection},
instantiated with the @msg{new} class message.

In the other hand, the @smalltalk{ships} is an @class{Array}
containing only two elements, the player ships. We use the
@msg{with:with} class message to instantiate and populate the array
with two ships created in the argument message.

For the readability, we split the code in several lines with the
appropriate indentation.

@smallexample
   torpedoes @assign{} OrderedCollection new.
   ships @assign{} Array 
      with: SpaceShip new
      with: SpaceShip new.
@end smallexample

@subheading @ref{updateShipsTorpedoes}
@smallexample
SpaceWar>>stepAt: msSinceLast
  ships do: [:each | each update: msSinceLast / 1000 ].
  ships do: [:each | each unpush ].
  torpedoes do: [:each | each update: msSinceLast / 1000 ].
@end smallexample



@c Chapter 5
@node Control Flow Messaging (Solutions)
@unnumberedsec Control Flow Messaging
@subheading @ref{blockDivisor}
@smallexample
| divisors |
divisors @assign{} [:x | (1 to: x) select: [:d | x \\ d = 0] ].
divisors value: 60.
@result{} #(1 2 3 4 5 6 10 12 15 20 30 60)
divisors value: 45
@result{} #(1 3 5 9 15 45)
@end smallexample

@subheading @ref{implementingAndOr}
Check the implementations in @class{Boolean}, @class{True} and
@class{False}.

@subheading @ref{categorizeTeleport}
Once the method is edited and saved, in the @label{Method} pane select
its name @label{teleport:} then do ...@clicksequence{right click
@click{} @label{more...} @click{} @label{change category...} @click{}
@label{events}}...

@subheading @ref{categorizeControls}
In the @label{Method} pane, select one uncategorized control method,
then do ...@clicksequence{right click @click{} @label{more...}
@click{} @label{change category} @click{} @label{new...}} key-in
@label{control}.

To categorized the remaining uncategorized control methods, repeat but
select @label{control} at the last step as this category now exists.

@subheading @ref{shipCollision}
We do not need an iterator to detect a collision between two
ships. However we use an iterator to take action on each ship when a
collision is detected.
@smallexample
SpaceWar>>collisionsShips
| positionA position B |
   positionA @assign{} ships first morphPosition.
   positionB @assign{} ships second  morphPosition.
   (positionA dist: positionB) < 25 ifTrue: [
      ships do: [:each |
         each flashWith: Color red.
         self teleport: each]
   ]
@end smallexample

Local variables only used to ease the code source formatting in
printed book.

@subheading @ref{torpedoSunCollision}
You just need to pick the appropriate code snippets from the
referenced exercise and examples.
@smallexample
SpaceWar>>collisionsTorpedoesStar
| position |
   position @assign{} centralStar morphPosition.
   torpedoes do: [:each | 
      (each morphPosition dist: position) < 8 ifTrue: [
         each flashWith: Color orange.
         self destroyTorpedo: each]]
@end smallexample


@c Chapter 6
@node Visual with Morph (Solutions)
@unnumberedsec Visual with Morph

@subheading @ref{allActorsMorph}
Just replace all @class{Object} occurrences with @class{PlacedMorph}:

@smallexample
PlacedMorph subclass: #SpaceWar
   instanceVariableNames: 'centralStar ships torpedoes'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

PlacedMorph subclass: #CentralStar
   instanceVariableNames: 'mass'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

PlacedMorph subclass: #SpaceShip
   instanceVariableNames: 'name position heading velocity
      fuel torpedoes mass acceleration'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
@end smallexample


@subheading @ref{refactoryShipTorpedo}

@smallexample
Mobile subclass: #SpaceShip
   instanceVariableNames: 'name fuel torpedoes'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

Mobile subclass: #Torpedo
   instanceVariableNames: 'lifeSpan'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'
@end smallexample


@c Chapter 7
@node The Fundamentals of Morph (Solutions)
@unnumberedsec The Fundamentals of Morph

@subheading @ref{exeCrossMorph}
The @method{drawOn:} method is modified to draw two distinct,
unconnected lines:

@smallexample
LineExampleMorph>>drawOn: aCanvas
   aCanvas strokeWidth: 20 color: Color green do: [
      aCanvas
         moveTo: 0 @@ 0;
         lineTo: 200 @@ 200;
         moveTo: 200 @@ 0;
         lineTo: 0 @@ 200 ]
@end smallexample

Learn how the @msg{moveTo:} message moves the pencil to a given
position with the pen up, then the @msg{lineTo:} asks the pencil to
draw from that previous position to this new position.

@subheading @ref{exeRectMorph}
We create a @class{RectangleExampleMorph}, subclass of
@class{PlacedMorph}:
@smallexample
PlacedMorph subclass: #RectangleExampleMorph
   instanceVariableNames: 'fillColor'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'
@end smallexample
Then its necessary methods to initialize and to draw the morph:
@smallexample
initialize
   super initialize .
   fillColor @assign{} Color random alpha: 0.5

drawOn: aCanvas
   aCanvas
      strokeWidth: 1
      color: Color blue
      fillColor: fillColor
      do: [
         aCanvas moveTo: 0 @@ 0;
            lineTo: 200 @@ 0;
            lineTo: 200 @@ 100;
            lineTo: 0 @@ 100;
            lineTo: 0 @@ 0]
@end smallexample

@figure{Several rectangle morphs,E-exeRectMorph,4}

@subheading @ref{exeRotateRect}
The rectangle we defined in the solution of @ref{exeRectMorph} rotates
around its top left corner, because this is where is the origin (0;0).

@figure{This rectangle rotates around its top left corner,E-exeRotateRect1,4}

We need to redefine its corners coordinates so its center position
matches the origin (0;0):

@smallexample
drawOn: aCanvas
   aCanvas
      strokeWidth: 1
      color: Color blue
      fillColor: fillColor
      do: [
         aCanvas moveTo: -100 @@ -50;
            lineTo: 100 @@ -50;
            lineTo: 100 @@ 50;
            lineTo: -100 @@ 50;
            lineTo: -100 @@ -50]
@end smallexample

@figure{This rectangle rotates around its center,E-exeRotateRect2,3.5}

@subheading @ref{exeCrossCenterMorph}
@smallexample
drawOn: aCanvas
   aCanvas strokeWidth: 20 color: Color green do: [aCanvas
      moveTo: -100 @@ -100;
      lineTo: 100 @@ 100;
      moveTo: 100 @@ -100;
      lineTo: -100 @@ 100]
@end smallexample


@subheading @ref{exeFancyClock}
Among the clock parts (submorphs) we only need to modify the drawing
of the @class{ClockSecondHandMorph} class. The disc is surrounded with a
thin red line and filled in yellow.
@smallexample
ClockSecondHandMorph>>drawOn: aCanvas
   aCanvas strokeWidth: 1.5 color: Color red do: [
      aCanvas
         moveTo: 0 @@ 0;
         lineTo: 85 @@ 0 ].
   aCanvas ellipseCenterX: 0 y: -70 rx: 3 ry: 3 
      borderWidth: 1 
      borderColor: Color red fillColor: Color yellow
@end smallexample


@subheading @ref{exeTorpedoExtent}
The width of the torpedo is 4 pixels and its height 8 pixels:
@smallexample
Torpedo>>morphExtent
   @return{} `4 @@ 8`
@end smallexample

@subheading @ref{exeTorpedoDrawing}
The @class{Torpedo}'s @method{drawOn:} method is very similar to the
one in @class{SpaceShip} class:
@smallexample
Torpedo>>drawOn: canvas
   | a b c |
   a @assign{} 0 @@ -4.
   b @assign{} -2 @@ 4.
   c @assign{} 2 @@ 4.
   canvas line: a to: b width: 2 color: color.
   canvas line: c to: b width: 2 color: color.
   canvas line: a to: c width: 2 color: color.
@end smallexample

@subheading @ref{exeSpaceShipClassSideDiagram}
We use a local variable because we use two times the vertices, one to
draw the ship and a second time to draw the gas exhaust.
@smallexample
SpaceShip>>drawOn: canvas
   | vertices  |
   vertices @assign{} self class vertices.
   canvas line: vertices first to: vertices second width: 2 color: color.
   canvas line: vertices second to: vertices third width: 2 color: color.
   canvas line: vertices third to: vertices fourth width: 2 color: color.
   canvas line: vertices fourth to: vertices first width: 2 color: color.
   "Draw gas exhaust"
   acceleration ifNotZero: [
      canvas line: vertices third to: 0@@35 width: 1 color: Color gray]
@end smallexample

@subheading @ref{exeDrawMobile}
You need both to iterate each vertex of the @smalltalk{vertices} array
and access the subsequent vertex by index. The arithmetic reminder
operation @msg{\\\\} is needed to keep the index in the boundary of the
collection.

When @smalltalk{size} is 4 (Space ship diagram), the argument
@smalltalk{(i \\ size + 1)} takes alternatively the following values:

@itemize

 @item @strong{i = 1} => 1 \\ 4 + 1 = 1 + 1 = @strong{2}

 @item @strong{i = 2} => 2 \\ 4 + 1 = 2 + 1 = @strong{3}

 @item @strong{i = 3} => 3 \\ 4 + 1 = 3 + 1 = @strong{4}

 @item @strong{i = 4} => 4 \\ 4 + 1 = 0 + 1 = @strong{1}

@end itemize

@smallexample
Mobile>>drawOn: canvas polygon: vertices
   | size |
   size @assign{} vertices size.
   vertices withIndexDo: [: aPoint :i |
      canvas
         line: aPoint
         to: ( vertices at: (i  \\ size + 1) )
         width: 2
         color: color]
@end smallexample

@subheading @ref{exeAccurateDetection}
Just replace each morph position distance approach with the
intersection detection between the morphs' display bounds:

@smallexample
SpaceWar>>collisionsShips
   (ships first displayBounds intersects: ships second displayBounds)
   ../..

SpaceWar>>collisionsShipsTorpedoes
   ships do: [:aShip | 
      torpedoes do: [:aTorpedo |
         (aShip displayBounds intersects: aTorpedo displayBounds)
   ../..

SpaceWar>>collisionsTorpedoesStar
   torpedoes do: [:each | 
      (each displayBounds intersects: centralStar displayBounds)
   ../..
@end smallexample


@c Chapter 8
@node Events (Solutions)
@unnumberedsec Events

@subheading @ref{handleMouseOver}
The method @method{handlesMouseOver:}, implemented in the
@class{SpaceWar} morph class, returns true so the game play is
informed of mouse over events in dedicated methods.
@smallexample
SpaceWar>>handlesMouseOver: event
   @return{} true
@end smallexample

@subheading @ref{mouseEnter}
You need to browse the @method{Morph>>handlesMouseOver:} method and
read the comment. It writes about a @msg{mouseEnter:} message; we
implement the matching method in @class{SpaceWar} class with the
behaviors previously described:
@smallexample
SpaceWar>>mouseEnter: event
   event hand newKeyboardFocus: self.	
   self startStepping
@end smallexample

@subheading @ref{mouseLeave}
The message @msg{mouseLeave:} is sent to our @class{SpaceWar} instance
each time the mouse cursor move out (leaves) of the game
play. Therefore we add the homonym method to the @class{SpaceWar}
class:
@smallexample
SpaceWar>>mouseLeave: event
   event hand releaseKeyboardFocus: self.
   self stopStepping
@end smallexample

@subheading @ref{keyboardEvent}
The @msg{handlesKeyboard} message is sent to a morph to know if it
wants to receive keyboard event. The morph responds true to this
message to state its interest on keyboard event. We implement the
method in the @class{SpaceWar} class:
@smallexample
SpaceWar>>handlesKeyboard
   @return{} true
@end smallexample

@subheading @ref{secondShipControl}
We designate the characters as @smalltalk{$w $a $s $d}. We append the
code below to the method @method{SpaceWar>>keyStroke:}
@smallexample
key = $w ifTrue: [@return{} ships second push].
key = $d ifTrue: [@return{} ships second right].
key = $a ifTrue: [@return{} ships second left].
key = $s ifTrue: [@return{} ships second fireTorpedo]
@end smallexample

@c Chapter 9
@node Code Management (Solutions)
@unnumberedsec Code Management

@subheading @ref{twoCategoriesOnePackage}
@enumerate

  @item In the System Browser, create two class categories: in its
  most left pane menu select @label{add item... (a)} and key in one
  category name at a time.

  @item Create two classes, in each category: @class{TheCuisBook}
  subclass of @class{Object} and @class{TheBookMorph} subclass of
  @class{PlacedMorph}.

  The two operations above are doable in one shot. Select any existing
  category and key in the class definition with the category name:

  @smalltalkExample{PlacedMorph subclass: #TheBookMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: '@strong{TheCuisBook-Views}'}

   Once you save the class definition, the @class{TheBookMorph} class is
   created -- obviously -- but also the @label{TheCuisBook-Views}
   category!

   @item Go to the Installed Packages tool ...@clicksequence{World menu
   @click{} @label{Open...} @click{} @label{Installed Packages}}...,
   press the @label{new} button and key in @label{TheCuisBook}.

   @item Press the @label{save} button, you are done!

@end enumerate
