@node Code Management
@chapter Code Management

@quotation
Change is easy, except for the changed part.
@author Alan Kay
@end quotation

@* @* @* @*


Regarding the source code, @cuis{} comes with several tools to
manipulate it: the image, the change record, the change set and the
package system. We give you a tour around these mechanisms then explain
how you should manage the code of an application written with @cuis{}.

@menu
* The Image::
* The Change Log::
* The Change Set::
* The Package::
* Daily Workflow::
* Source Code File::
@end menu

@node The Image
@section The Image

We already wrote about the @cuis{} @dfn{image} (@xref{Installing and
configuring @cuis{}}). When saving the state of the virtual machine in
the image file, every single change done in the environment will be
embodied in the saved image: this includes the windows in the
environment, Workspace contents, newly written classes and methods,
existing instances including the visual morphs, a debugging session
with a System Browser, an Inspector, etc.

At any time, the user can save the image with ...@clicksequence{World
menu @click{} @label{Save}}... Alternatively @label{Save as...} saves
the image under an alternate name provided by the user.

Saving the image is the easiest and most straightforward method to save
your own code. But we can't really call that code management as your
code is not saved in a dedicated file of its own but mixed into other code in an
image. Moreover it will be unpractical to share your work with others,
for example via a version control system.

For various reasons, an image may be in fuzzy state: the virtual
machine may crash when running it, the file system may be unstable,
or the environment may be in a lock
down state. This is a drawback when using the image as your sole
source code repository. The net result could be loosing your work.

Where you lost code because of a virtual machine crash
there is a solution to recover your lost editing,
the @dfn{Change Log}.

@node The Change Log
@section The Change Log
@cindex change log

@cuis{} records any action occurring in the environment: the code you
edit in the System Browser, the code you execute in a
Workspace. Therefore, in the event of a @cuis{} crash you can restore
unsaved changes when you launch the same @cuis{} image again. Let's explore
this feature with a simple example.

On a fresh @cuis{} installation, create a new class category named
@label{TheCuisBook} and within @class{TheBook} class:

@itemize

  @item Over the class category pane of System Browser (at the most
   left), do ...@clicksequence{Right click @click{} @label{add
   items... (a)}}... key in @label{TheCuisBook}.

  @item Select this new class category and create the class
  @class{TheBook} as a kind of @class{Object}: select the
  @label{TheCuisBook} category then in the source code below edit the
  class template to replace @smalltalk{#NameOfClass} with
  @smalltalk{#TheBook} then save the class definition with
  @kbd{Ctrl-s}.
  
@end itemize

Open a Workspace, then key in the following code:

@smalltalkExample{| myBook |
myBook @assign{} TheBook new}

@cuis{} does not save code you key in the Workspace, but code you
execute. Let's execute this code: @kbd{Ctrl-a} then @kbd{Ctrl-p}, the
Workspace prints the result: @smalltalk{a TheBook}, an instance of a
@class{TheBook} class.

Now kill @cuis{} abruptly. On GNU/Linux, you can use the
@command{xkill} command to terminate @cuis{} by clicking at its window.

Now start @cuis{} again, and it immediately informs you there are unsaved
changes:

@figure{@cuis{} informs about lost changes, ch10-RecoverLostChanges1,7}

From there you have three options:

@itemize

  @item @strong{Restore lost changes automatically.} @cuis{} will
  apply all the changes: new class definitions, new methods; edited
  class definitions and method source code; executed code (in
  Workspaces or any places where code can be executed). Often this is
  not really what you want to do, particularly the executed code.

@cindex tools @subentry lost changes 
  @item @strong{Restore lost changes manually.} In the subsequent
  @label{Lost changes} window you are presented with the unsaved
  changes, one per line, in chronological order, with the older ones
  at the top of the list. You select each change (line) you want to
  restore, then you apply your selection with the @label{file in
  selections} button.

  @figure{Manually select the changes to file in,ch10-RecoverLostChanges2,9}

  To file-in the changes related to the creation of the
  @class{TheBook} class but not the executed code in the Workspace, select
  the two lines related to class definition.

  The contextual menu (mouse right click) of the @label{Lost changes}
  window offers a lot of options to filter the changes. Useful when
  the batch of lost changes is important.

  @item @strong{Nothing.} No changes are restored. Keep in mind that
  unsaved changes aren't discarded until you save your image.

@cindex tools @subentry recent changes
  In case you change your mind and you want to recover changes, do
  ...@clicksequence{World menu @click{} @label{Changes...}  @click{}
  @label{Recently logged Changes...}}.

  The system presents you a list of image snapshots tagged with a date
  stamp. Pick up the one occurring just before you lost your code,
  most likely at the top of the list. Then in the @label{Recent
  changes} window, you proceed as described earlier to cherry pick the
  changes to restore.

@end itemize

@node The Change Set
@section The Change Set
@cindex change set

On a fresh @cuis{} installation, each code you edit in the System
Browser is recorded in a @dfn{Change Set},

You browse a change set with a tool named the @dfn{Change Sorter}:
...@clicksequence{World menu @click{} @label{Changes...}  @click{}
@label{Change Sorter}}...

@figure{The Change Sorter@comma{} class edit,ch10-ChangeSet1,8}

The @class{TheBook} class we added to @cuis{} in the previous section
is a change made to the core of the system. By default, it is recorded
in a change set automatically created by the system. In
@ref{ch10-ChangeSet1} at the top right, observe the class
@class{TheBook}, it belongs to a change set named
@label{4439-CuisCore-AuthorName-2020Nov16-13h40m}.  In the left pane,
each unsaved change set is marked with a @label{--->}. Here it tells us
the change was not saved on disk. To save the change set, just use its
contextual menu and use one of the @label{file out} entries. The change
set will be saved along the @cuis{} image under its system name with
@label{AuthorName} substituated with the real author name.

@figure{The Change Sorter@comma{} method edit,ch10-ChangeSet2,8}

Observe @ref{ch10-ChangeSet2}, after we added the method
@method{pages} to the @class{TheBook} class, the middle pane lists the
added or modified methods. When a method is selected its source code
is printed in the bottom pane.

Let's say we save the change set -- @label{File out} entries in the
change sorter tool menu. This creates a new file
@file{4451-CuisCore-HilaireFernandes-2020Nov14-21h08m-hlsf.001.cs.st}
along the @cuis{} image file:

@smalltalkExampleCaption{Change set contents, changeSetContents,
From Cuis 5.0 [latest update: #4450] on 18 November 2020 at 9:05:09 am'!
!classDefinition: #TheBook category: 'TheCuisBook'!
Object subclass: #TheBook
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'TheCuisBook'!

!TheBook methodsFor: 'as yet unclassified' stamp: 'hlsf 11/18/2020 09:04:58'!
pages
   @return{} 151! !}

To load this change set back in a new image, you use the @dfn{File
List} tool ...@clicksequence{World menu @click{} @label{Open} @click{}
@label{File List}}... Browse the folder containing the change set file
to load, then select it, from there you have three options to
manipulate it.

@figure{The File List tool@comma{} to install a change set and more,ch10-FileListChangeSet,11}

@itemize

  @item @label{code}. It opens a kind of System Browser limited to
  the code in the change set file. It is a very handy tool to read and
  to learn the code from the change set.

  @item @label{contents}. It opens a @dfn{Change List} tool to review
  the modifications to the image this change set will produce once
  installed. It also let you cherry pick the individual changes you
  want to install and to discard. Each line you cherry pick represents
  a class or a method addition/modification. Once you select the code
  to install, press the @label{file in selections} button to proceed
  with the installation.

  Consider a co-developer modifying the @class{TheBook} class, she
  added an instance variable @smalltalk{pages} and adjusted the
  @method{pages} methods accordingly. She filed out her changes then
  shared the file with you. Observe in @ref{ch10-ChangeList} how you
  will review her changes with the Change List tool. Our code that
  will be removed from the image is shown in red stroked, and her code
  that will be installed is shown in green.

  @figure{Change List tool to review modifications to the image,ch10-ChangeList,8}

  @item @label{install}. It just installs the complete change set
  without interactivity.
  
@end itemize

The change set way of managing the source code is used by the
developers of @cuis{}, to work on its core image. When you want to
write an application, a dedicated tool or even a set of classes
covering a specific domain, you really want to use something else to
manage the code: a package.

@node The Package
@section The Package
@cindex package
@cindex class @subentry category

A package can hold a set of classes part of the same class category.

Let's save our @smalltalk{Morphic-Learning} category as a package
using our Installed Packages Browser.

...@clicksequence{World menu @click{} @label{Open...} @click{}
@label{Installed Packages}}...

@figure{Installed Packages Browser,ch10-Package-with-requirement,11}

Note that we invoked @smalltalk{Feature require:
'Morphic-Widgets-Extras'} and @smalltalk{Feature require:
'VectorGraphics'} above.

@cindex package @subentry requirement

Looking at the package names, we can observe several things of note:

@itemize

  @item Each package is versioned; @emph{VectorGraphics} has version
  1, revision 180.
  
  @item There is a package @emph{Collections-CompactArrays} which we
  never asked for.
  
  @item Looking at the lower pane, note that the
  Collections-CompactArrays package is @strong{required} by package
  VectorGraphics.
  
@end itemize

Now this is important.  When a packaged Feature is required, it may
specify that it also requires other packages to work properly, and
in fact to specify that those packages be up to a specific version level.

This is the key to being able to
safely compose packages which have requirements.

OK, let's click on the @label{New} button and type
@label{Morphic-Learning} into the prompt.  This results in a new
package with the same name as our @smalltalk{Morphic-Learning}
category.  Note that this is version 1, revision 0 (1.0 at right) and
that the package has yet to be saved.

@figure{New Package -- @smalltalk{Morphic-Learning},ch10-NewPackage-Morphic-Learning,11}

Remember that to create our @class{ClockMorph} we required the
packaged VectorGraphics Feature, so to be able to load our package
which makes use of this we need to select our new package and
click on the @label{add Requirement} button at center, right.

This brings up a list of loaded packages to choose from.

@figure{Select package (or Cuis base version) to require,ch10-Add-Requirement,4}

Now when we @label{save} our package, we see the pathname where the package
file was created.  We can now safely email this file, check it into a version
control system, make a copy to our backup thumb drive.

@figure{Saved package -- @smalltalk{Morphic-Learning},ch10-Saved-with-requirement,11}

As mentioned above, package files are just text files with a special format
which @cuis{} knows how to load.  If you open a File List browser and
view the package file, you will see information on how the package
was created, what it provides and requires, and, if you filled in the
comment box in the Installed Packages browser, a description.

@exercise{Describe a package,exeDescribePackage,@emph{Type ``Morphic
Toys'' into the comment box@comma{} re-save your package@comma{} and
(re)select the package in a File List to see your package
description.}}

@exercise{Save Spacewar! package,exeSavePkgSpacewar, @emph{If you have
not already done so@comma{} create and save a @ref{Spacewar!
package}. There are no additional requirements to specify.}}

@c explain how to include class extension in a package
@cindex package @subentry prefix
There are other interesting things we can do with packages.
We can include several class categories in a single
package. Consider we want to span our CuisBook classes in two
categories @label{TheCuisBook-Models} and @label{TheCuisBook-Views}. A
new package created with the name @label{TheCuisBook} includes these
two class categories; this label is a @dfn{prefix} to search for the
matching categories to include in the package.

Therefore, often, a package comes with several categories to organize
the classes in matching domains. We encourage to do so. When an
application or framework grows, to keep a sound organisation, you may
fell the need to reshape the class categories: rename, split, merge,
etc. As long as you keep the same prefix in the class categories and
the package name, your classes will be safe in the same package. In
the System Browser, you can drag and drop any class in any class
category to reorganize.

@exercise{Two class categories@comma{} one package,twoCategoriesOnePackage,
@emph{Create a @label{TheCuisBook} package from the two class
categories @label{TheCuisBook-Models} and
@label{TheCuisBook-Views}. The former contains a @class{TheBook}
class and the later a @class{TheBookMorph} class. Save the package
on disk.}}

@cindex package @subentry system extension
Imagine we need to print the page number of the @class{TheBook} table
of contents as lower cased roman number, as we do with the printed
version of this book. The code is very simple:

@smalltalkExample{4 printStringRoman asLowercase
@result{} 'iv'}

Instead of invoking this sequence of messages each time we need it, we
 add a dedicated message to the @class{Integer} class:

@smalltalkExample{Integer>>printStringToc
   @return{} self printStringRoman asLowercase}

Now within our @class{TheBook}'s methods we just do things like:

@smalltalkExample{../..
 aPage @assign{} Page new.
 aPage number: 1 printStringToc.
 ../..}

Now we are facing a problem. For the need of the @label{TheBook}
package we extend the @class{Integer} class with a method
@method{printStringToc}, however this method addition is part of the
@cuis{} core system and its associated default change set. See
@ref{ch10-ChangeSetToCore}, the Change Sorter tool exactly shows that.

@figure{Change Sorter@comma{} supplementary method to core, ch10-ChangeSetToCore,9}

Therefore when saving our @label{TheBook} package this method is not
included and it is lost when quitting @cuis{}. To include it in our
package we categorize it in a method category with the
@label{*TheCuisBook} prefix. @label{*TheCuisBook-printing} is a good
candidate. In the System Browser method pane, over
@method{printStringToc}, do ...@clicksequence{Contextual menu @click{}
@label{more...} @click{} @label{change category...}} and key in
@label{*TheCuisBook-printing}.

Now the Change Sorter writes about @method{Integer>>printStringToc}:
@cite{Method was moved to some other package}. The Installed Packages
tools now tells us we have an extension, use its @label{browse} button
to get an update on the package contents.

@figure{Package with extension to the @class{Integer} class of the
@label{Kernel-Numbers} system class
category,ch10-BrowsePackageChange,9}

Observe how each category -- class or method one -- of an extension is
prefixed with a @label{*}.

@node Daily Workflow
@section Daily Workflow

For our Spacewar! game, we created a dedicated package
@file{Spacewar!.pck.st} file. This is the way to go when writing
external package: define a dedicated package and from time to time
save your work with the @label{save} button in the Installed Packages
tool (@xref{ch02-InstalledPackages}).

@cuis{} uses GitHub to host, version, diff its core development and to
manage a set of external packages (i.e. code that is maintained
independently and outside @cuis{} but closely related to it).

Package files are simple text files, encoded for latin alphabet (ISO
8859-15) and handled without problems by GitHub. @cuis{} uses the LF
(ascii code 10) newline convention, as preferred in GitHub. This
allows Git/GitHub to diff versions, and merge branches.

Separate GitHub repositories are used for projects, i.e. package or
set of closely related packages that are always loaded and maintained
together as a whole.

Your daily workflow with @cuis{} to develop an external package will
look like:

@enumerate

  @item Start with a standard, fresh, Cuis image. Never save the
  image.

  @item Set up your preferred version control system to manage your
  external packages. The recommendation is to use a GitHub repository
  with a name beginning with 'Cuis-Smalltalk-', so it will be easy for
  anybody to find it. But beside this consideration, using any other
  version control system is fine.
  
  @item Install the necessary packages from the @cuis{} Git
  repositories.

  @item Develop. Modify and/or create packages.

  @item Save own packages (to your preferred repositories).

  @item add / commit / push accordingly to your version control system

  @item Fileout changes that are not part of any package. These are
  automatically captured in numbered changesets, separated from
  changes to packages.

  @item Exit the image. Usually without saving.
   
@end enumerate


@cuisNote{In addition to adding a package preload @emph{requirement},
you can also select a requirement and @label{delete} or @label{update}
it using the buttons at the lower right.  Sometimes a package changes
which your code depends on and you have to change your code to accord.
When this happens, to want to be sure to require the newer, changed
version.  Selecting a requirement and pressing @label{update}
will update the requirement to use the latest loaded package version.}


@subsection Automate your image

As described in the daily workflow, it is a good habit to not save the
whole image but only the modified package of the edited source
code. However, each time we start a coding session, it is tedious to
set up the image to fit our personal needs and taste.

Things one may want to personalize in the image are:

@itemize

  @item Preferences adjustments,

  @item Placement of tools like System Browser, Workspace, Transcript,

  @item Default contents in the Workspace, ready to be executed,

  @item Installation of Packages.

@end itemize

@cindex command line option @subentry -s (run a script)
@cindex start-up script

We want to record these image preferences in a
@file{setUpEnvironment.st} script to be executed at start up. On
GNU/Linux, you ask @cuis{} to run a script with the @option{-s}, for
example @command{squeakVM Cuis5.0.image -s setUpEnvironement.st} where
@file{setUpEnvironement.st}. is a file containing Smalltalk code. A
real life example may look like:
@verbatim
../cogspur/squeak Cuis5.0-4426 -s ../scripts/setUpEnvironment.st
@end verbatim

We describe in detail an example of a set up script organizing the
environment as seen in @ref{ch10-ImageSetUp}. It is interesting
Smalltalk code poking around heterogeneous areas of @cuis{} like the
developer tools, the Morph system, the preferences and collection
handling.

@figure{Environment of an image started with the set up script,ch10-ImageSetUp,12}

@cindex morph @subentry world
Let's start by removing the open windows:

@smalltalkExample{| list |
"Delete all windows but the taskbar"
list @assign{} UISupervisor ui submorphs reject: [:aMorph |
   aMorph is: #TaskbarMorph].
list do: [:each | each delete].}

The whole user interface world of @cuis{} is a kind of Morph, a
@class{WorldMorph} instance. Its submorphs are windows, menus, the
taskbar or any kind of morph the user can interact with. To access
this @class{WorldMorph} instance you ask to the @class{UISupervisor}
with the @msg{ui} message. Once we select all the morphs in the world
but the taskbar -- really @msg{reject:} it -- we @msg{delete} them
from the world.

Next, we change the preferences:

@smalltalkExample{| list morph |
../..
"Change to Dark theme"
Feature require: #'Theme-Themes'.
DarkTheme beCurrent.
"Adjust font size"
Preferences smallFonts.
"Adjust taskbar size"
morph @assign{} UISupervisor ui submorphs first.
morph scale: 1 / 2.
Display fullScreenMode: true.
self runningWorld doOneCycle.}

We require Theme-Themes package; as it is not installed on the default
image, it will be searched on the disk for installation. Regarding the
taskbar access, remember we deleted all the morphs but the taskbar
from the world, therefore the taskbar is really the first in the sub
morphs collection of the world. Finally, we update the scale of the
taskbar and we request @cuis{} to display itself full screen. As we
changed several visual parts, we request one update cycle of the
environment (i.e. the running world in @cuis{} terminology).

Before installing the tools, we ask a @class{RealEstateAgent} the free
area. Sadly this agent does not take into consideration the area
occupied by the taskbar, so we need to tweak its answer. Then we
compute a quarter of this free area extent (half in width and half
in height make a quarter of the whole free area):

@smalltalkExample{| list morph area extent |
../..
"Compute the available free space for windows placement"
area @assign{} RealEstateAgent maximumUsableArea
   extendBy: 0 @@ morph morphHeight negated.
extent @assign{} area extent // 2.}

Now we are ready to install a few tools. First three browsers each
occupying a quarter of the screen:

@smalltalkExample{"Open a few System Browsers"
BrowserWindow openBrowser
   morphPosition: 0 @@ 0;
   morphExtent: extent.
BrowserWindow openBrowser
   morphPosition: area width // 2 @@ 0;
   morphExtent: extent.
"Open a System Browser on a specific class"
morph @assign{} BrowserWindow openBrowser
   morphPosition: area extent // 2;
   morphExtent: extent.
morph model setClass: Integer selector: nil.}

Then in the remaining free quarter, we install a workspace occupying
two thirds of the area and a transcript one third. The workspace is
installed with some default contents. We need to hack a bit because
when asking for a new Workspace, @cuis{} does not answer the created
instance, we have to search it in the windows of the world.

@smalltalkExample{"Open a Workspace with some default contents"
morph @assign{} Workspace openWorkspace.
morph model actualContents: '"Some code"
1 + 2.
"Other code"
5 * 3.'.
morph
   morphPosition: 0 @@ (area height // 2);
   morphExtent: extent x @@ (2 / 3 * extent y).
"Open a transcript for logs"
TranscriptWindow openTranscript
   morphPosition: 0 @@ (area height // 2 + (2 / 3 * extent y));
   morphExtent: extent x @@ (1 / 3 * extent y).}

Of course you should adjust the argument of the @msg{actualContents:}
message to meaningful code for your usage.

@node Source Code File
@section Source Code File
@cindex @file{.st}
@cindex @file{.pck.st}
@cindex file extension @subentry @file{.st}
@cindex file extension @subentry @file{.st.pck}

In this chapter, you encountered files produced by the @cuis{}
management tools. Some come with the extension @file{.pck.st} and
others with the extension @file{.st}. They both contain Smalltalk code
but serve different purposes.

Files with extension @file{.pck.st} are @cuis{} package files. They
have a preamble with package information, like feature provided,
version information, a description for the package and the package
requirements.

Smalltalk code files can be installed by selecting them in the File
List Browser and clicking on @label{install} button.

When a package is installed, its dependencies are also installed and
the loaded packaged appears in the Package List tool. Package files
@file{.pck.st} are created using the Packages List tool in
Cuis-Smalltalk.

Files with extension @file{.st} contained serialized Smalltalk code --
classes and methods. They are created when you @dfn{file out} a
Smalltalk system category, class or method. You can serialize code in
@clicksequence{the System Browser by selecting a @strong{system
category}, @strong{class} or @strong{method} @click{} right click and
select @label{fileOut} from the context menu}.

Unlike @file{.pck.st} files, @file{.st} files don't contain any
dependencies, description, or package information, only serialized
Smalltalk code. @file{.st} files are around since Smalltalk’s early
days, while @file{.pkg.st} were added with the @cuis{} package
functionality.

In addition to @label{install}, selecting a code file in the File List
Browser also adds buttons to inspect the @label{code} and to treat code
@label{contents} like a Change Sorter. When inspecting the code, a
browser shows what code is different between the file and the running
image and allows one to import individual classes or methods with the
help of the context menu.
