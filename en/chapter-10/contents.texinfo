@node Code Management
@chapter Code Management

Regarding the source code, @cuis{} comes with several tools to
manipulate it: the image, the change record, the change set and the
package system. We give you a tour around these mechanisms then explain
how you should manage the code of an application written with @cuis{}.

@node The Image
@section The Image

We already wrote about the @cuis{} @dfn{image} (@xref{Installing and
configuring @cuis{}}). When saving the state of the virtual machine in
the image file, every single changes done in the environment will be
included in the saved image: this includes the windows in the
environment, workspace content, newly written classes and methods,
existing instances including the visual morphs, a debugging session
with a System Browser, an inspector and a debugger.


At any time, the user can save the image with
...@clicksequence{World menu @click{}
@label{Save}}... Alternatively @label{Save as...} saves the image under
an alternate name provided by the user.

Saving the image is the easiest and straightforward method to save
your own code. But we can't really call that code management as your
code is not saved in a dedicated file of its own but along the
image. Moreover it will be unpractical to share your work with other
person.

For various reasons, an image may be in fuzzy state: the virtual
machine may crash when running it or the environment may be in a lock
down state. This is another drawback when using the image as your sole
source code repository. The net result is loosing your work.

Another situation where you lost code is a virtual machine crash or to
forget to save the image when quitting @cuis{}. In such situation
there is a solution to recover your lost editing: the @dfn{ChangeSet}.

@cindex change log
@node The Change Log
@section The Change Log

@cuis{} records any action occurring in the environment: the code you
edit in the System Browser, the code you execute in a
Workspace. Therefore, in the event of a @cuis{} crash or you did not
save your editing when quitting the environment, you can restore your
editing when starting afresh @cuis{}. Let's explore this feature with
a simple example.

On a fresh @cuis{} installation, create a new class category named
@label{TheCuisBook} and within @class{TheBook} class:

@itemize

  @item Over the class pane of System Browser (at the most left), do
   ...@clicksequence{Right click @click{} @label{add
   items... (a)}}... key in @label{TheCuisBook}.

  @item Select this new class category and create the class
  @class{TheBook} as a kind of @class{Object}: select the
  @label{TheCuisBook} category then in the source code bellow edit the
  class template to replace @smalltalk{#NameOfClass} with
  @smalltalk{#TheBook} then save the class definition with
  @kbd{Ctrl-s}.
  
@end itemize

Open a Workspace, then key in the following code:

@smalltalkExample{| myBook |
myBook @assign{} TheBook new}

@cuis{} does not save code you key in the Workspace, but code you
execute. Let's execute this code: @kbd{Ctrl-a} then @kbd{Ctrl-p}, the
Workspace prints the result: @smalltalk{a TheBook}, an instance of a
@class{TheBook} class.

Now quit @cuis{} without saving, of course it first asks us
@label{Save the current image before}, choose @label{No}, then it
warns us:

@verbatim
Some ChangeSet for Cuis core might have unsaved changes.
If you continue, they would be lost.
Continue?
@end verbatim

Proceed with @label{Yes}. At least, we are done quitting the @cuis{}
environment without saving.

Now start again @cuis{}, then do ...@clicksequence{World menu
@click{} @label{Changes...} @click{} @label{Recently logged
Changes...}}. The system presents a list image snapshpots tagged with
date stamp. Pick up the one occurring just before you lost your code.

@cindex change set
@node The Change Set
@section The Change Set

On a fresh @cuis{} installation, each code you edit in the System
Browser is recorded in a @dfn{Change Set},

You browse a change set with a tool named the @dfn{Change Sorter}:
...@clicksequence{World menu @click{} @label{Changes...}  @click{}
@label{Change Sorter}}...

@figure{The Change Sorter@comma{} class edit,ch10-ChangeSet1,8}

The @class{TheBook} class we added to @cuis{} in the previous section
is a change made to the core of the system. By default, it is recorded
in a change set automatically created by the system. In
@ref{ch10-ChangeSet1} at the top right, observe the class
@class{TheBook}, it belongs to a change set named
@label{4439-CuisCore-AuthorName-2020Nov16-13h40m}.  In the left pane,
each unsaved change set is marked with a @label{-->}. Here it tells us
the change was not saved on disk. To save the change set, just use its
contextual menu and use one of the @label{file out} entry. The change
set will be saved along the @cuis{} image under its system name with
@label{AuthorName} substituated with the real author name.

@figure{The Change Sorter@comma{} method edit,ch10-ChangeSet2,8}

Observe @ref{ch10-ChangeSet2}, after we added the method
@method{pages} to the @class{TheBook} class, the middle pane lists the
added or modified methods. When a method is selected its source code
is printed in the bottom pane.

Let's say we save the change set -- @dfn{File out} entries in the
change sorter tool menu. This creates a new file
@file{451-CuisCore-HilaireFernandes-2020Nov14-21h08m-hlsf.001.cs.st}
along the @cuis{} image file:

@smalltalkExampleCaption{Change set contents, changeSetContents,
From Cuis 5.0 [latest update: #4450] on 18 November 2020 at 9:05:09 am'!
!classDefinition: #TheBook category: 'TheCuisBook'!
Object subclass: #TheBook
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'TheCuisBook'!

!TheBook methodsFor: 'as yet unclassified' stamp: 'hlsf 11/18/2020 09:04:58'!
pages
   @return{} 151! !}

To load this change set back in a new image, you use the @dfn{File
List} tool ...@clicksequence{World menu @click{} @label{Open} @click{}
@label{File List}}... Browse the folder containing the change set file
to load, then select it, from there you have three options to
manipulate it.

@figure{The File List tool@comma{} to install a change set and more,ch10-FileListChangeSet,11}

@itemize

  @item @label{code}. It opens a kind of System Browser limited to
  the code in the change set file. It is a very handy tool to read and
  to learn the code from the change set.

  @item @label{contents}. It opens a @dfn{Change List} tool to review
  the modifications to the image this change set will produce once
  installed. It also let you cherry pick the individual changes you
  want to install and discard. Each line you cherry pick represents a
  class or a method addition/modification. Once you selected the code
  to install, press the @label{file in selections} button to proceed
  with the installation.

  Consider a co-developer modifying the @class{TheBook} class, she
  added an instance variable @smalltalk{pages} and adjust the
  @method{pages} methods accordingly. She filed out her changes then
  share the file with you. Observe in @ref{ch10-ChangeList} how you
  will review her changes with the Change List tool. Stroked in red
  our code in the image to be removed and in green her changes to be
  installed.

  @figure{Change List tool to review modifications to the image,ch10-ChangeList,8}

  @item @label{install}. It just install the complete change set
  without interactivity.
  
@end itemize

The change set way of managing the source code is used by the
developers of @cuis{}, to work on its core image. When you want to
write an application, a dedicated tool or even a set of classes
covering a specific domain, you really want to use something else to
manage the code, a package.


@cindex package
@cindex class, category
@node The Package
@section The Package
A package can hold a set of classes who belong to the same category;
we already discussed about that in a previous chapter, see
@ref{Spacewar! package}.

@c explain how to include class extension in a package



@c TOC
@c * Cuis save in the change files everything we do.
@c * It can be played back
@c * We can save the image to save our Work-in-Progress.
@c * The drawback: even if very unlikly an image can be corrupted and witch such an image, the virtual machine executable will crash at start up. Every things on the image can be lost under this circumstances.
@c * Package is the way to save the source code of a Cuis application
@c * Describe your daily workflow with package
@c * Gives a few script to automate your installation
