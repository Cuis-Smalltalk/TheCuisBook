@node Visual with Morph
@chapter Visual with Morph

@quotation
Morphic is a user interface framework that makes it easy and fun to
build lively interactive user interfaces.
@author John   Maloney
@end quotation


@* @* @* @*


What would we expect if we asked for good support for building GUIs in a
programming system?

All modern computers (and phones, etc) have high resolution color
displays. Any software running on them, that is accessible to a user,
needs to show stuff on that Display.

Conventional UI managers (that is, Operating Systems and Web Browsers)
started by including only the most basic GUI elements first: basic
text editors, buttons, simple lists, scrolling for large content, and
(usually) multiple resizeable overlapping windows. Anything else needs
to be handled via additional libraries. While there are libraries for
handling richer content (D3.js and Matplotlib are examples), the
result is not consistent, neither for developers nor for users.

@cuis{} takes a different approach, pioneered by Smalltalk-80 and
especially Self. We will get into detail in the next chapter,
@emph{The Fundamentals of Morph}.  For now, let's deal with Morphs directly.

We take the high quality Display for granted, as well as a mouse, finger or
other pointing device. And we build on the objective of providing
ample possibilities for GUIs both in existing, and in novel styles and
designs yet to be invented. Additionally, in the usual Smalltalk way,
all the framework code is available for study and modification. There
are no third party libraries. Only the lowest level code is
precompiled, but that still can be overriden or changed.

Therefore every object you see in @cuis{} is a @class{Morph} or is
composed of @class{Morph}s.  Basically, a @class{Morph} is an object
with state and behavior that can also depict itself on a computer
display screen.

Because Morphs are useful, when you look at
class @class{Morph} in a Hierarchy Browser you will
see a large number of methods and many, many subclasses.
But the basic ideas are quite simple.


@menu
* Installing a Package::
* Ellipse Morph::
* Submorph::
* A brief introduction to Inspectors::
* Building your specialized Morph::
* Spacewar! Morphs::
@end menu


@node Installing a Package
@section Installing a Package
This chapter will require you to install the package
@label{UI-Base-Morphs.pck.st}, it is part of the
@url{https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-UI,,Cuis-Smalltalk-UI}
project. To fetch this package from the web, you have two options:

@enumerate

  @item Grab the file
  @file{@url{https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-UI/raw/main/lib/UI-Base-Morphs.pck.st,,UI-Base-Morphs.pck.st}}
  and save it in the same folder as your @cuis{} image file.

  @item In the @cuis{} image folder, clone its Git repository:

@example
git clone git@@github.com:Cuis-Smalltalk/Cuis-Smalltalk-UI.git
@end example

Along the @label{UI-Base-Morphs.pck.st} packages there are other ones
you can also discover in this repository.

@end enumerate

@cindex package @subentry load @subentry by code
Once done, in a Workspace execute the code to install the package:

@smalltalkExample{Feature require: 'UI-Base-Morphs'}

Your @cuis{} environment is now equiped for the next sections of this
chapter.

@node Ellipse Morph
@section Ellipse Morph
@cindex morph @subentry ellipse
Let's start with one of the basic morphs, an @class{EllipseMorph}.
You could write @smalltalk{EllipseMorph new openInWorld} and
@label{@b{D}o-it}, but we are doing visual things for now, so let's
get a World Menu and select from @label{New Morph...} @label{Basic}
submenu and drag onto the desktop.

Every time one obtains a morph from a @label{New Morph...} submenu,
one gets a different morph but made to a standard style.

@figure{Select @class{EllipseMorph} from a
menu,ch06-01-EllipseMorphFromMenu,8}

The basic challenge of @dfn{user interface design} is
to communicate visibility and control.
Where am I?  What can I do here?

One of the balance points in design is how to eliminate clutter.  One
useful strategy is to reveal capabilities in context as they are
needed.

@cindex morph @subentry halo
In the case of @cuis{}, you have to know some basics because helpful
tools are there but stay out of the way.  At any time you can
@kbd{Right-Click} on the desktop to get the World Menu.  You can also
@kbd{Middle-Click} on any @class{Morph} to get a @dfn{halo} of
@dfn{construction handles}, which show up as small colored circular
icons.  If you pause the cursor over one of these, you get a @dfn{tool
tip}, a temporary text popup who's name should give a clue to its
usage.

If you click elsewhere the construction handles leave, but you can get them
back at any time with a mouse click.

@figure{Drag construction handle to change size,ch06-03-DragToEnlarge,4}

Now that you know this, move the yellow lower right handle with tool
tip @label{Change size} via @dfn{Click-Drag}.  Just hold down the
left mouse button while the cursor is over the handle, move the cursor
to the right and down, and release the mouse button.

@figure{A larger ellipse,ch06-04-Enlarged,4}

@node Submorph
@section Submorph
@cindex morph @subentry submorph
@cindex morph @subentry rectangle
Morphs can contain other morphs.  These interior morphs are called
@dfn{submorph}s of their containing morph. Again, you can do this by
writing the software ``code'', but let's do it directly with a
@class{BoxedMorph}.

First we obtain a @class{BoxedMorph} from the @label{New morph...}
submenus. The @class{BoxedMorph} instance displays itself as a
rect with a border.

@figure{Obtain a @class{BoxedMorph},ch06-05-AddRectangle,7}

Now drag the rect over the ellipse and @kbd{Middle-Click} on the
rect and click on the blue construction handle to gets the rect's
@dfn{Morph Menu}.  Use the menu selection @label{embed into} and
select the ellipse as its new parent.

@figure{Make the rect a submorph of the
ellipse,ch06-06-EmbedRectIntoEllipse,5}

Now when you click-drag the ellipse, or use the @label{Pick up} or
@label{Move} construction handles, the rect is just a decoration for
the ellipse.

Indeed, the rect seems to have fused into the ellipse.  Using the
mouse where the rect shows itself is just using the mouse on the
ellipse.  This rect does not have many interesting behaviors.

Let's add a behavior to just this one @class{BoxedMorph}.

@node A brief introduction to Inspectors
@section A brief introduction to Inspectors
To get the construction halo for an interior morph, just
@kbd{Middle-Click} multiple times to ``drill down'' through the
submorph hierarchy.

@figure{Middle-Click for construction
handles,ch06-07-MiddleClickRect,4.5}

@figure{Middle-Click again to descend into
submorphs,ch06-08-2ndMidClckToSubmorph,4.5}

There is an orange handle on the right, just under the green
@label{Duplicate} handle.  @kbd{Left-Click} this to get the
@label{Debug} menu.  Use this menu to get an @dfn{Inspector} for the
rect.

@cindex tools @subentry inspector
@cindex inspector @seeentry{tools}
Observe @ref{ch06-11aColorClickOnRect}, on the left we have a pane for
self, all inst vars, and the individual instance variables.  Clicking
to select ``all inst vars'' and the values pane on the right shows
that the owner of the rect is the ellipse and rect currently has no
submorphs.

The lower pane is a Smalltalk code editor, basically a workspace,
where @smalltalk{self} is bound to the object we are inspecting.

Inspectors work for every object by the way, not just morphs.

@figure{Add instance specific behavior,ch06-11aColorClickOnRect,8}

To add a behavior to all instances of a class, we create an instance
method.  Here we are going to create a behavior for ``just this one
@class{BoxedMorph} instance''.

@anchor{morphProperties}
@cindex morph @subentry properties
In addition to instance variables, a morph can have any number of
named @dfn{properties} which can be different for each morph.

We add two properties here:

@smalltalkExampleCaption{Edit the behavior of this morph from its Inspector,editMorphBehaviorInspector,
self setProperty: #handlesMouseDown: toValue: true.
self setProperty: #mouseButton1Up:localPosition:
   toValue: [:ignoredEvent :ignoredPosition| self color: Color random]}

These properties are special to the user interface.  You can find
methods with these names in the @class{Morph} class to see what they
do.

After selecting the text and @label{@b{D}o-it}, each time you
@kbd{Left-Click} on the rect it changes color!

Note that you can no longer move the ellipse by mouse-down on the
rect, because the rect now takes the mouse event.  You have to
mouse-down on the ellipse.  More on this below.

@cindex morph @subentry move/pick up
One quick note on @label{Move} versus @label{Pick up}.  @label{Move}
moves a submorph ``within'' its parent.  @label{Pick up} grabs a morph
``out'' of its parent.

@figure{Move submorph within its parent,ch06-09-Move-Within,4}

@figure{Pick a submorph out of its parent,ch06-10-PickUp-2-MoveOut,4}

@page
Before we go on, let's use an inspector on the ellipse to change
values of a couple of its instance variables.

@figure{Inspect instance variables of the ellipse,ch06-12-InspectEllipse,10}

Observe @ref{ch06-14-SetBorderColor} and @ref{editShapeInspector}. In
the lower pane of the inspector, code can be executed in the context
of the inspected object. @smalltalk{self} refers to the instance. Here
the pane contains code to set the borderWidth and the borderColor.

@smalltalkExampleCaption{Edit the state of this ellipse from its Inspector,editShapeInspector,
self borderWidth: 10.
self borderColor: Color blue}

@figure{Use Inspector to set border color and
border width,ch06-14-SetBorderColor,10}

In the typical case one wants to refine or change behaviors for all
instances of a class.

@node Building your specialized Morph
@section Building your specialized Morph
@cindex morph @subentry subclass
Let's make a simple subclass which changes color when
@kbd{Left-Click}ed.  Create a new class just as we did with Spacewar!
but subclass @class{EllipseMorph} with @smalltalk{#ColorClickEllipse}.

@smalltalkExample{EllipseMorph subclass: #ColorClickEllipse
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'}

Save the class definition with @kbd{Ctrl-s}.

@cindex event @subentry testing
@kbd{Right-Click} on the @label{Message Category} pane and select
@label{new category...}.  This brings up a number of selections and
allows us to create new ones.  Select ``event handling testing''.
Then add the method @smalltalk{ColorClickEllipse>>handlesMouseDown:}.

@smalltalkExample{handlesMouseDown: aMouseButtonEvent
  "Answer that I do handle mouseDown events"
  @return{} true
}

@cindex event @subentry handling
Likewise, add a new catagory ``event handing'' and add the other
method we need.

@smalltalkExample{mouseButton1Up: aMouseButtonEvent localPosition: localEventPosition
   "I ignore the mouseEvent information and change my color."
   self color: Color random}

Now, you have created a new Morph class and can select a
@class{ColorClickEllipse} from the World Menu @label{New Morph..} and
try it out.  These are fun to @kbd{Left-Click} on.  Make as many as
you want!

@figure{Obtain a @class{ColorClickEllipse},ch06-15-ColorClickEllipse,9}

Now you know how to specialize an individual morph, or make a whole
new class of them!


@node Spacewar! Morphs
@section Spacewar! Morphs

@subsection All Morphs
Previously we defined the actors of the game as subclasses of the very
general @class{Object} class (See
@ref{torpedoClassVariables}). However the game play, the central star,
the ships and the torpedoes are visual objects, each with a dedicated
graphic shape:

@itemize

  @item the game play is a simple rectangular area filled with the
  black color,

  @item the central star is a fluctuating yellow disk with an orange
  aura,

  @item the ships are rotating quadrangles each one painted with a
  different color,

  @item a torpedo is a rotating triangle to paint with a different
  color depending on the firing ship.
  
@end itemize

Therefore it makes sense to turn these actors into kinds of
@class{Morph}s, the visual entity of @cuis{}. To do so, point a System
Browser to the class definition of each actor, replace the parent
class @class{Object} by @class{PlacedMorph}@footnote{A
@class{PlacedMorph} is a kind of @class{Morph} with a supplementary
@smalltalk{location} attribute; so it can be instructed to move, to
scale and to rotate in the screen.}, then save the class definition
with @kbd{Ctrl-s}.

For example, the torpedo class as seen in @ref{torpedoClassVariables}
is edited as:

@smalltalkExample{PlacedMorph subclass: #Torpedo
   instanceVariableNames: 'position heading velocity lifeSpan'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'}

Moreover, a placed Morph already knows about its position and
orientation on screen -- it can be dragged and moved in the screen and
rotated with the mouse cursor. Therefore the @smalltalk{position} and
@smalltalk{heading} instance variables are redundant and should be
removed. For now we keep it, it will be removed later when we will
know how to replace each of its use cases with its appropriate Morph
counterpart.

@exercise{Make all Morphs, allActorsMorph, @emph{Edit
@smalltalk{SpaceWar}@comma{} @class{CentralStar} and @class{SpaceShip}
to be subclasses of the @class{PlacedMorph} class.}}

As explained in the previous sections of this chapter, a morph can be
embedded within another morph. In Spacewar!, a @class{SpaceWar} morph
instance presenting the game play, it is the @emph{owner} of the central
star, space ship and torpedo morphs. Put in other words, the central
star, space ships and torpedoes are @emph{submorphs} of a
@class{SpaceWar} morph instance.

The @method{SpaceWar>>initializeActors} code in @ref{initActors} is
 not complete without adding and positioning the central star and
 space ships as submorphs of the Spacewar! game play:

@smalltalkExampleCaption{Complete code to initialize the Spacewar! actors, initFullActors,
SpaceWar>>initializeActors
   centralStar @assign{} CentralStar new.
   self addMorph: centralStar.
   centralStar morphPosition: 0 @@ 0.
   torpedoes @assign{} OrderedCollection new.
   ships @assign{} Array with: SpaceShip new with: SpaceShip new.
   self addAllMorphs: ships.
   ships first 
      morphPosition: 200 @@ -200;
      color: Color green.
   ships second 
      morphPosition: -200 @@ 200;
      color: Color red}

There are two important messages: @msg{addMorph:} and
@msg{morphPosition:}. The former asks to the receiver morph to embed
its morph argument as a submorph, the latter asks to set the receiver
coordinates in its owner's reference frame. From reading the code, you
deduce the origin of the owner reference frame is its middle, indeed
our central star is in the middle of the game play.

There is a third message not written here, @msg{morphPosition}, to ask
the coordinates of the receiver in its owner's reference frame.

Remember our discussion about the @smalltalk{position} instance
variable. Now you clearly understand it is redundant and we remove it
from the @class{SpaceShip} and @class{Torpedo} definitions. Each time
we need to access the position, we just write @smalltalk{self
morphPosition} and each time we need to modify the position we write
@smalltalk{self morphPosition: newPosition}. More on that later.


@c refactor ship and torpedo as mobile entity
@subsection The art of refactoring
@cindex refactoring

In our @ref{newtonModel,, newtonian model} we explained the
space ships are subjected to the engine acceleration and the gravity
pull of the central star. The equations are described in
@ref{motionEquations}.

Based on these mathematics, we wrote the @smalltalk{SpaceShip>>update:}
method to update the ship position according to the elapsed time --
see @ref{spaceShipMechanic}.

So far in our model, a torpedo is not subjected to the central start
gravity pull nor its engine acceleration. It is supposing its mass is
zero which is unlikely. Of course the @smalltalk{Torpedo>>update:}
method is simpler than the space ship counter part -- see
@ref{torpedoMechanic}. Nevertheless, it is more accurate and even more
fun that the torpedoes are subjected to the gravity pull@footnote{So a
torpedo should come with a mass.} and its engine acceleration; an
agile space ship pilot could use gravity assist to accelerate a
torpedo fired with a path close to the central star.

What are the impacts of these considerations on the torpedo and space
ship entities?

@enumerate

  @item They will share @emph{common states} as the mass, the
  position, the heading, the velocity and the acceleration.

  @item They will share @emph{common behaviors} as the necessary
  computations to update the position, direction, gravity pull and
  velocity.

  @item They will have @emph{different states}: a torpedo
  has a life span state while a space ship has fuel tank capacity and
  torpedoes stock states.

  @item They will have @emph{different behaviors}: a
  torpedo self destructs when its life span expires, a space ship
  fires torpedoes and accelerates as long as its fuel tank and its
  torpedoes count are not zero.

@end enumerate

Shared state and behaviors suggest a common class.  Unshared states
and behaviors suggests specialized subclasses which embody
the differences.  So let us ``factor out'' the shared elements of
the @class{SpaceShip} and @class{Torpedo}
classes into a common ancestor class; one more specialized
than the @class{Morph} class they currently share.

Doing such analysis on the computer model of the game is part of the
@dfn{refactoring} effort to avoid behavior and state duplications while
making more obvious the common logic in the entities. The general idea of
code refactoring is to rework existing code to make it more elegant,
understandable and logical.

To do so, we will introduce a @class{Mobile} class, a kind of
 @class{PlacedMorph} with behaviors specific to a mobile object
 subjected to accelerations. Its states are the mass, position,
 heading, velocity and acceleration. Well, as we are discussing
 refactoring, the mass state does not really makes sense in our game,
 indeed our mobile's mass is constant. We just need a method returning
 a literal number and we can then remove the @smalltalk{mass} instance
 variable. Moreover, as explained previously, a @class{PlacedMorph}
 instance already know about its position and heading, so we also
 remove these two attributes, although there are common behaviors to a
 Space ship and a torpedo.

It results in this @class{Mobile} definition:

@smalltalkExampleCaption{Mobile in the game play,mobileClass,
PlacedMorph subclass: #Mobile
   instanceVariableNames: 'velocity acceleration color'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'}

@exercise{Refactoring @class{SpaceShip} and @class{Torpedo},refactoryShipTorpedo,
@emph{What should be the refactored definitions of the
@class{SpaceShip} and @class{Torpedo} classes?}}

The first behaviors we add to our @class{Mobile} are its
initialization and its mass:

@smalltalkExample{Mobile>>initialize
  super initialize.
  velocity @assign{} 0 @@ 0.
  acceleration @assign{} 0
        
Mobile>>mass
  @return{} 1}

The next methods to add are the ones relative to the physical
calculations. First, the code to calculate the gravity acceleration:

@smalltalkExampleCaption{Calculate the gravity force,gravityForce,
Mobile>>gravity
"Compute the gravity acceleration vector"
   | position |
   position @assign{} self morphPosition.
   @return{} -10 * self mass * owner starMass / (position r raisedTo: 3) * position}

This method deserves a few comments:
@itemize

  @item @smalltalk{self morphPosition} returns a @class{Point}
  instance, the position of the mobile in the owner reference frame,

  @item @smalltalk{owner} is the @class{SpaceWar} instance
  representing the game play. It is the owner -- parent morph -- of
  the mobile. When asking @msg{starMass}, it interrogates its central
  star mass and return its value:

  @smalltalkExample{SpaceWar>>starMass
   @return{} centralStar mass}

  @item In @smalltalk{position r}, the @msg{r} message asks the radius
  attribute of a point considered in polar coordinates. It is just its
  length. It is the distance between the mobile and the central star.

  @item @smalltalk{* position} really means multiply the previous
  scalar value with a @class{Point}, hence a vector. Thus the returned
  value is a @class{Point}, a vector in this context, the gravity
  vector.

@end itemize

The method to update the mobile position and velocity is mostly the
same as in @ref{spaceShipMechanic}. Of course the
@smalltalk{SpaceShip>>update:} and @smalltalk{Torpedo>>update:}
version must be both deleted. Below is the complete version with the
morph's way of accessing the mobile's position:

@smalltalkExampleCaption{@class{Mobile}'s @method{update:} method,mobileUpdate,
Mobile>>update: t
"Update the mobile position and velocity"
  | ai ag newVelocity |
  "acceleration vectors"
  ai @assign{} acceleration * self direction.
  ag @assign{} self gravity.
  newVelocity @assign{} (ai + ag) * t + velocity.
  self morphPosition:
     (0.5 * (ai + ag) * t squared)
     + (velocity * t)
     + self morphPosition.
  velocity @assign{} newVelocity.	
  "Are we out of screen? If so we move the mobile to the other corner
  and slow it down by a factor of 2"  
  (self isInOuterSpace and: [self isGoingOuterSpace]) ifTrue: [
     velocity @assign{} velocity / 2.
     self morphPosition: self morphPosition negated]}

Now we should add the two methods to detect when a mobile is heading
off into deep space.

But first we define the method @method{morphLocalBounds} in each of
our Morph objects. It returns a @class{Rectangle} instance defined in
the Morph coordinates by its origin and extent:

@smalltalkExampleCaption{Bounds of our Morph objects,boundMorph,
SpaceWar>>morphLocalBounds
   @return{} -500 @@ -500 extent: 1000 @@ 1000

CentralStar>>morphLocalBounds
   @return{} Rectangle center: 0 @@ 0 extent: self morphExtent

Mobile>>morphLocalBounds
   @return{} Rectangle encompassing: self class vertices}

@smalltalkExampleCaption{Test when a mobile is ``spaced out'',mobileDeepSpace,
Mobile>>isInOuterSpace
"Is the mobile located in the outer space? (outside of the game
play area)"
   @return{} (owner morphLocalBounds containsPoint: self morphPosition) not

Mobile>>isGoingOuterSpace
"is the mobile going crazy in the direction of the outer space?"
   @return{} (self morphPosition dotProduct: velocity) > 0}

As you see, these test methods are simple and short. When writing
@cuis{} code, this is something we appreciate a lot and we do not
hesitate to cut a long method in several small methods. It improves
readability and code reuse. The @msg{containsPoint:} message asks the
receiver rectangle whether the point in argument is inside its shape.

@cindex overriding
When a mobile is updated, its position and velocity are
updated. However the @class{Mobile} subclasses @class{SpaceShip} or
@class{Torpedo} may need additional specific updates. In object
oriented programming there is this special mechanism named
@dfn{overriding} to achieve this.

See the @class{Torpedo>>update:} definition:

@smalltalkExample{Torpedo>>update: t
   "Update the torpedo position"
   super update: t.
   "orientate the torpedo in its velocity direction, nicer effect
   while inaccurate"
   self heading: (velocity y arcTan: velocity x).
   lifeSpan @assign{} lifeSpan - 1.
   lifeSpan isZero ifTrue: [owner destroyTorpedo: self].
   acceleration > 0 ifTrue: [acceleration @assign{} acceleration - 1000]}

Here the @method{update:} method is specialized to the torpedo
specific needs. The mechanical calculation done in @method{Mobile>>update:}
is still used to update the torpedo position and velocity: this is
done by @smalltalk{super update: t}. We already discussed
@smalltalk{super}. In the context of
@method{Torpedo>>update:} it means search for an @method{update:}
method in @class{Torpedo}'s parent class, that class's parent
and so on until the method
is found, if not a @emph{Message Not Understood} error is signalled.

Among the specific added behaviors, the torpedo orientation along its
velocity vector is inaccurate but nice looking. To orient accordingly
the torpedo, we adjust its heading with its velocity vector heading.

The life span control, the self-destruction sequence, and the engine
acceleration are also handled specifically. When a torpedo is just fired, its
engine acceleration is huge then it decreases quickly.

With the System Browser pointed to the @method{Torpedo>>update:}
method, observe the @option{inheritance} button. It is light green,
which indicates the message is sent to @smalltalk{super} too. This is
a reminder the method supplies a specialized behavior.  The button
tool tip explains the color hilight meanings within the method's text.
When pressing the @option{inheritance} button, you browse all
implementations of the @method{update:} method within this inheritance
chain.

@figure{Update's inheritance button,ch06-20-TorpedoUpdateInheritance,9}

We already met an example of overriding when initializing a space ship
instance -- see @ref{initSpaceShip}. In the context of our class
refactoring, the @method{initialize} overriding spans the whole
@class{Mobile} hierarchy:

@smalltalkExampleCaption{Initialize overriding in the @class{Mobile}
hierarchy,initMobileHierarchy,Mobile>>initialize
   super initialize.
   color @assign{} Color gray.
   velocity @assign{} 0 @@ 0.
   acceleration @assign{} 0

SpaceShip>>initialize
   super initialize.
   self resupply

Torpedo>>initialize
   super initialize.
   lifeSpan @assign{} 500.
   acceleration @assign{} 4000}

Observe how each class is only responsible of its specific state
initialization:

@enumerate

 @item @strong{SpaceShip.} Its mechanical states are set with the
 @smalltalk{super initialize} and then the ship is resupplied with
 fuel and torpedoes:

 @smalltalkExample{SpaceShip>>resupply
   fuel @assign{} 500.
   torpedoes @assign{} 20}

 @item @strong{Torpedo.} Inherited mechanical states initialized; add
 self-destroy sequence initialization and acceleration adjusted to
 mimic the torpedo boost at fire up.

@end enumerate

The behaviors specific to each mobile is set with additional
methods. The @class{SpaceShip} comes with its control methods we
already described previously in @ref{shipControls} and
@ref{fireTorpedo}, of course there is none for a
@class{Torpedo}.

Another important specific behavior is how each kind of @class{Mobile}
is drawn in the game play, this will be discussed in a next chapter on
the fundamentals of Morph.

@c refactoring central star, no need for mass only a behavior
