@node The Message Way of Life
@chapter The Message Way of Life

@quotation
The key in making great and growable systems is much more to design how its
 modules communicate rather than what their internal properties and
 behaviors should be.
@author Alan Kay
@end quotation


@* @* @* @*

A Smalltalk system is a collection of entities communicating with each other
through messages. That's all, there is nothing more.


@menu
* Communicating entities::
* Message send definitions::
* Message to string entities::
* Messages to number entities::
* A brief introduction to the system Browser::
* Spacewar! models::
@end menu

@node Communicating entities
@section Communicating entities

@cindex message @subentry sender
@cindex message @subentry receiver
@cindex instance
@cindex class
When a given entity receives a message from another entity, it
triggers a specific behavior.  The receiving entity of the message is
called the @dfn{receiver} and the sending entity, the @dfn{sender}. In
@cuis{} terminology, an entity is called an @dfn{instance of a class},
a @dfn{class instance}, or simply an @dfn{instance}.  A @dfn{class} is
a kind of model for an entity.

@cindex method
The behavior is defined internally in the receiver and it can be
triggered from any instance.
@strong{Behaviors are invoked only by messages sent between entities}.
An entity may send a message to
itself. A behavior is defined in a class and is called a @dfn{method}.

@cindex garbage collection
This results in a huge cloud of entities communicating with each other
through message sending. New entities are instantiated when needed
then automatically garbage collected when no longer required. On a
fresh @cuis{} environment, the count of class instances is more than
150000.

@cindex collection @subentry @method{inject:into:}
@smalltalkExampleCaption{Calculating the number of entities, entitiesCount,
ProtoObject allSubclasses sum: [ :class | class allInstances size] 
@result{} 152058}

The count of classes, the models for the entities -- instances of the class @class{Class} -- is less than 600.

@smalltalkExampleCaption{Calculating the number of classes, classesCount,
Smalltalk allClasses size
@result{} 586}

@cuisNote{Because you are not using the base image but one used
to teach classes, you will likely see
a much larger number.}

To be honest, in our previous chapter we skipped this important detail
on Smalltalk design. We wrote about message sending without explaining
much, we wanted you to discover this design informally.
The scripts you
read and wrote were all about entities communicating with each other
through messages.

@node Message send definitions
@section Message send definitions
@cindex message @subentry send

There are three kinds of messages in @cuis{}:

@cindex message @subentry unary

@itemize
 @item @strong{Unary messages} take no argument.
 @*
 In @smalltalk{1 factorial} the message @msg{factorial} is sent to the
 object @smalltalk{1}.

@cindex message @subentry binary
 @item @strong{Binary messages} take exactly one argument.
 @* 
 In @smalltalk{1 + 2} the message @msg{+} is sent to the object
 @smalltalk{1} with the argument @smalltalk{2}.

@cindex message @subentry keyword
@item @strong{Keyword messages} take an arbitrary number of
 arguments.
 @* 
 In @smalltalk{2 raisedTo: 6 modulo: 10} the message consisting of the
 message selector @msg{raisedTo:modulo:} and the arguments
 @smalltalk{6} and @smalltalk{10} is sent to the object @smalltalk{2}.

@end itemize

Unary message selectors consist of alphanumeric characters, and start
with a lower case letter.

Binary message selectors consist of one or more characters from the
following set:

@smalltalkExample{+ - / \ * ~ < > = @@ % | & ? ,}

Keyword message selectors consist of a series of alphanumeric
keywords, where each keyword starts with a lower-case letter and ends
with a colon.

@cindex message @subentry precedence
Unary messages have the highest precedence, then binary messages, and
finally keyword messages, so:

@smalltalkExample{2 raisedTo: 1 + 3 factorial
@result{} 128}

First we send @smalltalk{factorial} to @smalltalk{3}, then we send
@smalltalk{+ 6} to @smalltalk{1}, and finally we send
@smalltalk{raisedTo: 7} to @smalltalk{2}.

Precedence aside, evaluation is strictly from left to right, so

@smalltalkExample{1 + 2 * 3
@result{} 9}

is not 7. Parentheses must be used to alter the order of evaluation:

@smalltalkExample{1 + (2 * 3)
@result{} 7}

Parenthesis can also be used to make potentially confusing code more
clear. For example, the strict left to right evaluation order can be
confusing when applied to mathematical expressions. In the Spacewar!
code snippet below, the parentheses make it more clear that the
addition happens first:

@smalltalkExampleCaption{Ship velocity,updateShipVelocity,
newVelocity @assign{} (ai + ag) * t + velocity}

@cindex message  @subentry cascade
@cindex cascade of messages
To send multiple messages to the same receiver a @dfn{cascade} can be
used to state the receiver once, followed by the cascade of messages
separated by semicolons. Here is our earlier @ref{hello2} code
expressed with a cascade:

@smalltalkExampleCaption{Cascade of messages, helloCascade,
Transcript
   show: 'Hello World!';
   newLine;
   show: 'I am Cuising'}

Another example of a cascade from the Spacewar! game:

@smalltalkExampleCaption{Stop and teleport spaceship at a random position, teleportShip,
aShip 
   velocity: 0 @@ 0;
   morphPosition: randomCoordinate value @@ randomCoordinate value}

Observe the text here is formatted to ease code understanding. It is possible to
write the cascade of messages in one line, but it reduces the
readability of the code:

@smalltalkExample{Transcript show: 'Hello World!'; newLine; show: 'I am Cuising'}

The @class{Transcript} class is frequently helpful in presenting
useful information when developing an application. An alternative to
the @kbd{Ctrl-d} (@emph{@b{D}o it}) shortcut is @kbd{Ctrl-p}
(@emph{@b{P}rint it}), which executes the script and prints the result
direcly in the Workspace.

In the @ref{helloCascade}, we have requested no special result.  Selecting the
text and typing @kbd{Ctrl-p} results in the default, which is to
return the object to which a message is sent, in this case the
@class{Transcript}.

@node Message to string entities
@section Message to string entities
@cindex string @subentry character access

Access to a character in a string is done with the keyword message
@msg{at:} and its index position in the string as the argument. Execute
the following examples with the @kbd{Ctrl-p} shortcut:

@smalltalkExample{'Hello' at: 1 @result{} $H
'Hello' at: 5 @result{} $o}

Observe how a character is prefixed with the ``$'' symbol.

@strong{Caution.} The index indicates position naturally from 1 to the
string length.

@cindex string @subentry @method{indexOf:}
@smalltalkExample{'Hello' indexOf: $e
@result{} 2}

@cindex string @subentry @method{at:put:}
@cindex @method{yourself}
To change one character, use the companion two keyword message
@msg{at:put:}. The argument must be noted as a character:
@smalltalkExample{'Hello' at: 2 put: $a; yourself
@result{} 'Hallo'}

Observe the use of the cascade with the @msg{yourself} message.  A
cascade sends the following messages to the original receiver, so
@smalltalk{#yourself} returns the updated string.  Without the
cascade, @smalltalk{$a} is returned as the result of the @msg{at:put:}
message.

@exercise{Hello to Belle,helloBelle, @emph{Replace each character of
the string 'Hello' to become 'Belle'.}}

@cindex character @subentry ascii
Characters can be converted to integers and integers to characters:
@smalltalkExample{$A asciiValue @result{} 65
(65 + 25) asCharacter @result{} $Z}

@cindex string @subentry @method{shuffled}
@cindex collection @subentry @method{shuffled}
Shuffling a string can be fun but not very useful. However,
shuffling can apply to any kind of collection, not only to a string, and it
will prove to be useful as we will see later:
@smalltalkExample{'hello world' shuffled
@result{} 'wod llreohl'}
Note that the results of each shuffle are different.

@cindex string @subentry @method{asArray}
@cindex message @subentry composition
Messages naturally compose:
@smalltalkExample{'hello world' shuffled asArray
@result{} #($h $d $l $  $o $w $e $l $l $o $r) }

An @class{Array} literal starts with a hash or sharp character, @smalltalk{$#}
and parentheses surround the elements of the array.
In this case the elements are @class{Character}s, but they can
be instances of any class.

@cindex string @subentry @method{sort}
Similarly, we can ask a string to sort its characters:
@smalltalkExample{'hello world' sort
@result{} ' dehllloorw'}

Like @smalltalk{#shuffled}, all collections answer to the message @smalltalk{#sorted},
which answers a sorted collection.
@cindex string @subentry @method{sorted}
@smalltalkExample{'hello world' sorted
@result{} #($  $d $e $h $l $l $l $o $o $r $w)}

Note that this breaks the pattern of the result type.  We get a @class{String}
result when sending a @class{String} the message @smalltalk{#shuffled} but get
an @class{Array} result when sending a @class{String} the message
@smalltalk{#sorted}.

We take great care in Smalltalk to create names which reduce surprise, but there
are cases, as seen here, where something odd happens.  We will discuss this
further when we look at different kinds of @class{Collection}s and
discuss how we name instances and methods to show intent and reduce surprise.

@node Messages to number entities
@section Messages to number entities
@cindex number @subentry root
@cindex number @subentry @method{sqrt}
@cindex number @subentry @method{squared}
@cindex number @subentry rational fraction @subentry operations

Earlier, we discussed how @cuis{} knows about rational fractions.  The
four arithmetic operations and mathematical functions are implemented
with unary and binary messages understood by the rational numbers:

@smalltalkExample {(15 / 14) * (21 / 5) @result{} 9 / 2
(15 / 14) / ( 5 / 21) @result{} 9 /2 
(3 / 4) squared @result{} 9 / 16
(25 / 4) sqrt @result{} 5 / 2}

@exercise{Sum of the squares,squaredSum, @emph{Write the code to compute the
sum of the squares of the inverse of the first four integers.}}

@cindex number @subentry decimal division
If @cuis{} integer division returns a rational number, how do we find the
result in decimal? One option is to write a number as a floating point literal,
a @dfn{Float}.
This kind of literal is written with the integer
and fractional parts separated by a dot ``.'':
@smalltalkExample{ 15.0 / 4 @result{} 3.75
15 / 4.0 @result{} 3.75}

Another option is to convert an integer to a float with the
@msg{asFloat} message. It is very useful when the integer is in a
variable:

@smalltalkExample{15 asFloat / 4
@result{} 3.75}

@cindex number @subentry integer @subentry division
You can also ask for division with truncation to
get an integer result using 
the message @msg{//}:
@smalltalkExample{15 // 4
@result{} 3}

@cindex number @subentry integer @subentry division reminder
The modulo remainder of the Euclidean division is computed with the message
@msg{\\\\}:
@smalltalkExample{15 \\\\ 4
@result{} 3}

@cindex number @subentry integer @subentry @method{odd}
@cindex number @subentry integer @subentry @method{even}
@cindex number @subentry integer @subentry @method{isPrime}
@cindex number @subentry integer @subentry @method{isDivisibleBy:}
@cuis{} has arithmetic operations to test if an integer is odd, even,
a prime number, or divisible by another. You just send the appropriate unary or
keyword message to the number:

@smalltalkExampleCaption{Testing on integer,integerBasicTest,
25 odd @result{} true
25 even @result{} false
25 isPrime @result{} false
23 isPrime @result{} true
91 isDivisibleBy: 7 @result{} true
117 isDivisibleBy: 7 @result{} false
117 isDivisibleBy: 9 @result{} true}

@cindex number @subentry integer @subentry @method{gcd:} (great common divisor)
@cindex number @subentry integer @subentry @method{lcm:} (lest common multiple)
With specific @dfn{keyword messages} you can compute the Least Common
Multiple and Greatest Common Divisor. A keyword message is composed of
one or more colons ``:'' to insert one or more arguments:

@smalltalkExample{12 lcm: 15 @result{} 60
12 gcd: 15 @result{} 3}

In the Spacewar! game, the central star is the source of a gravity
field. According to Newton's law of universal gravitation, any
object with a mass -- a spaceship or a torpedo in the game -- is
subjected to the gravitational force. We compute it as a vector to
account for both its direction and its magnitude.  The game code
snippet below shows a (simplified) mixed scalar and vector calculation
done with message sending (See @ref{motionEquations}):

@smalltalkExampleCaption{Computing the gravity force vector,gravityVector,
-10 * self mass * owner starMass / (position r raisedTo: 3) * position}

@node A brief introduction to the system Browser
@section A brief introduction to the system Browser
@cindex tools @subentry system browser
@cindex browser

Smalltalk organizes instance behaviors using classes.  
A class is an object which holds a set of methods to be executed
when one of its instances receives a message
that is the name of one of these methods.

The @dfn{System Browser}, in short the @dfn{Browser}, is a tool to
rule all the classes in @cuis{}. It is both a tool to explore the
classes (system or user ones) and to write new classes and methods.

To access the tool ...@clicksequence{World menu @click{}
@label{Open...} @click{} @label{Browser}}...

@figure{The System Browser,ch02-browserDetailed,12}

@cindex browser @subentry class category
@cindex class @subentry category
At the top left are the @dfn{class categories}, groups of classes
sharing the same theme. A category can also be used to create a
@dfn{Package}, which is an organisational element to save code in a
file system.  In @ref{ch02-browserDetailed}, the selected class
category is @strong{Kernel-Numbers}, a group of classes we already
started using. The term @strong{Kernel-} indicates it is part of
fundamental categories, but it is only a convention. See the other
categories such as @strong{Kernel-Text} and @strong{Kernel-Chronology}
related to text and date entities.

@cindex class  @subentry declaration
Next to the right are the classes in the selected class category. They
are nicely presented in a parent-child class hierarchy. When a class is
first selected in this pane, its declaration appears in the large pane
below, the @class{Number} class declaration is:

@smalltalkExample{Magnitude subclass: #Number
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Kernel-Numbers'}

A few important points in this declaration:

@itemize

   @item @emph{@class{Number}} is a subclass of @emph{@class{Magnitude}}.
   This means
   @class{Number} is a kind of specialized @class{Magnitude}.

   @item the declaration itself is Smalltalk code, indeed the message
   @msg{subclass:instanceVariableNames:classVariableNames:...}
   was sent to @class{Magnitude} to create this class.

   @item the @smalltalk{subclass:} argument @class{Number} is prefixed
   with ``#''. It is a symbol, a kind of unique string. Indeed when
   declaring the @class{Number} class, the system does not know about it
   yet, so it is named as a symbol.

   @item The @smalltalk{instanceVariableNames:} argument is a string:
   the instance variables of the class are declared by names separated
   by a space. There are none in this class definition.

@end itemize

A subclass inherits behaviors from its parent superclass, and so only needs
to describe what is different from its superclass.  An instance
of @class{Number} adds methods (which define behaviors) unknown to an instance
of @class{Magnitude}.  We will explore this in detail as we go forward.

@cindex class @subentry comment
To learn about the purpose of a class, it is good practice to @strong{always}
visit the class comment. Often a comment also comes with code
examples to learn how to use the object; these code snippets can be
selected and executed in place as done from a Workspace. In
@ref{ch02-browserDetailed}, see the @label{comment} button to read or
to edit the comment of the selected class.

@cindex method @subentry category
To the right of the class panel is the method categories panel.
A class may have many methods, so grouping
them by category helps other users orient themselves in finding related methods.
As a reference, @class{Number}
has more than 100 instance side methods implemented in
itself@footnote{When considering its parents, the combined method count is
more than 300.}. Clicking the @label{arithmetic} category
directly gives access to related methods in the next and last pane at
the right.

@cindex class @subentry category
@cindex keyboard shortcut @subentry find a class (@kbd{Ctrl-f})

@cuisNote{A @clicksequence{right click} on the Class Category pane
brings up its context menu.  You can select @label{find class ..} or,
as the menu indicates, use @kbd{Ctrl-f} (@emph{@b{F}ind}), to get a
fill-in panel and type part of a class name to match.  Try it with
@smalltalk{String}.}

@exercise{Count of methods,stringArith,@emph{How many methods are there
in the @strong{arithmetic} method category of the @class{String}
class?}}


@cindex method @subentry instance method
In the Browser, once a method is selected -- as in
@ref{ch02-browserDetailed}, @method{abs} method -- the bottom part
shows its source code, ready to be explored or edited. Often,
you will find a small comment just after the method name,
surrounded by double quotes.

Every object knows its own class and will respond with it when sent the message @smalltalk{#class}.

@cindex browser @subentry invoke from Workspace
@cindex keyboard shortcut @subentry browse a class (@kbd{Ctrl-b})
@strong{Tip.} In the workspace @kbd{Ctrl-b} (@emph{@b{B}rowse})
on the class name will open a Browser on the named class:

@itemize

   @item In the Workspace, type @smalltalk{2 class} and print
   with @kbd{Ctrl-p},

   @item @class{SmallInteger} is printed and automatically highlighted as the current selection,

   @item Invoke the Browser on the selected @class{SmallInteger}
   class with @kbd{Ctrl-b},

   @item A new Browser instance opens on the @class{SmallInteger}, ready to
   be explored.

@end itemize

@node Spacewar! models
@section Spacewar! models

@subsection First classes
In the last chapter we listed the protagonists of the game. Now, we
propose a first implementation of the game model with a set of classes
representing the involved entities:

@enumerate

 @item the game play @result{} @class{SpaceWar} class,

 @item a central star @result{} @class{CentralStar} class,

 @item two space ships @result{} @class{SpaceShip} class,

 @item torpedoes @result{} @class{Torpedo} class.

@end enumerate

@cindex browser @subentry class category (new)
@cindex class @subentry category (new)
Before defining these classes in @cuis{}, we want to create a
dedicated class category to group them there.

In any kind of @cuis{} window, pressing right-click on a pane will typically
bring up a menu of operations you can apply which are specific to that
pane.

With the mouse pointer over the class category pane of the Browser --
the left-most one -- just do:

...@clicksequence{right mouse click @click{} @label{add item}}... then
key in @emph{Spacewar!}


@cindex class @subentry create (new)
Once our new category is created, the Browser proposes a code template in
the method source code pane -- the bottom one -- to create a new class in
the @label{Spacewar!} category:

@smalltalkExample{Object subclass: #NameOfSubclass
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'}

@cindex keyboard shortcut @subentry save code (@kbd{Ctrl-s})
We replace the symbol @smalltalk{#NameOfSubclass} with a symbol
representing the name of the class we want to create. Let's start with
@smalltalk{#SpaceWar}. To save our class, while over the class
declaration code do ...@clicksequence{right mouse click @click{}
@label{Accept}}... @cuis{} will ask for your initials and name
if it hasn't before. Alternatively, you can just do @kbd{Ctrl-s} (@emph{@b{S}ave}).

Then simply repeat the process for each of @smalltalk{#SpaceShip},
@smalltalk{#CentralStar} and @smalltalk{#Torpedo}. If necessary, to
get another class code template, click the class category
@label{Spacewar!}.

When done, your class category should be filled with four classes as in
@ref{ch02-spacewarClassCategory}.

@figure{Spacewar! class category,ch02-spacewarClassCategory,6}


@anchor{Spacewar! package}
@subsection Spacewar! package
@cindex package @subentry  create (new)
@cindex package @subentry save
@cindex package @subentry tool
Another important use case of a class category is to define a package
to save code to a file.  A package saves the code of the classes held in
a given class category and a bit more, but more on that last point
later. To create our @label{Spacewar!} package and save our game code
we use the Installed Packages tool.

@enumerate
  @item Open the @dfn{Installed Packages} tool ...@clicksequence{World
  menu @click{} @label{Open...} @click{} @label{Installed
  Packages}}...

  @item On the Installed Packages window, do ...@clicksequence{click @label{new}
  button @click{} Input @emph{Spacewar!} @click{} @kbd{Return}}...

  @item Do ...@clicksequence{select @label{Spacewar!} package @click{}
  @label{save} button}...

@end enumerate

@figure{Installed Package window,ch02-InstalledPackages,8}

@cindex package @subentry load @subentry by graphic interface
A file @file{Spacewar!.pck.st} is created alongside the @cuis{} image
file.  To install a package in a fresh @cuis{}
environment, use the File List tool:

@enumerate

  @item Do ...@clicksequence{World menu @click{}
  @label{Open...} @click{} @label{File List}}...

  @item Search for the file @file{Spacewar!.pck.st} and click the
  @label{install package} button  

@end enumerate

You can also drag and drop the package file from your operating system
over to the Squeak window. Upon dropping the file over the window
@cuis{} will ask you what you want to do with this package.  To
install it in your enviroment you can simply press @label{Install
package}.

Or, you can open a Workspace, type in @smalltalk{Feature require: 'Spacewar!'}
and @kbd{Ctrl-d} @emph{@b{D}o it}.

Now, we have created and saved the package. Whenever you start with a
fresh @cuis{} environment, you can load the game package.

The classes we defined are empty shells with neither state nor
behavior. These will be filled in and refactored in the following
chapters.

@subsection The Newtonian model
@anchor{newtonModel}
For an enjoyable game experience, the player ships must follow
Newton's laws of motion. Acceleration, speed and position are computed
according to these laws. The ships are subjected to two forces: the
acceleration from the gravity pull of the central star and an inner
acceleration coming from the ship engines.

Later, we will learn how these equations are easily converted to
computer calculations.

@figure{Equations of the accelerations@comma{} speed and position,motionEquations,13}
