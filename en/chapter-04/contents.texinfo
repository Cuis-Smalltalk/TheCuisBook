@node The Collection Way of Life
@chapter The Collection Way of Life

@quotation
Simplicity does not precede complexity, but follows it.
@author Alan Perlis
@end quotation

@* @* @* @*

Since the concept's introduction in the 70s, collections and their associated
iterators are important programming elements of Smalltalk. Correctly
used, they improve both code compactness and code understanding; two
paradigms which may seem antagonistic. Since then, these innovations
have percolated into many popular programming languages.

@menu
* String -- a particular collection::
* Fun with variables::
* Fun with collections::
* Collections detailed ::
* SpaceWar! collections::
@end menu

@node String -- a particular collection
@section String -- a particular collection
@c browse the hierarchy to find more inherited behavior, Should this
@c be documented in browser section, or just there
@cindex class @subentry inheritance
@cindex class @subentry protocol
@cindex protocol

The @class{String} class also inherits behavior from its
ancestor classes. Indeed @class{String} is a subclass of
@class{ArrayedCollection}. The direct consequence is that when
searching for some specific behavior, you may need to explore the
parent classes too. The whole behavior of a class, defined in the
class itself and its parents is called its @dfn{protocol}.

@cindex browser @subentry hierarchy
@cindex browser @subentry protocol
Again the browser is helpful to explore a class protocol. You have two
options:

@cindex keyboard shortcut @subentry browse protocol (@kbd{Ctrl-p})
@enumerate

   @item @strong{Explore the protocol.} In the class pane of the
   browser, do ...@clicksequence{select @class{String} class @click{}
   right mouse button @click{} @label{Browse protocol
   (p)}}... Alternatively, use the keyboard shortcut @kbd{Ctrl-p}.

   @figure{Browse @class{String} protocol,ch03-browseProtocol,8}

   The new window is a protocol browser for the @class{String}
   class. At the left, we see a hierarchy of the @class{String}'s ancestor
   classes.
   At the right are the method selectors for strings and, in parenthesis,
   the class where they are defined.  Methods defined in class
   @class{String} itself are in bold characters.

   Selecting one class there only shows the protocol starting from
   this class down to the @class{String} class. If you select
   @class{String} in the left panel, you only see methods defined in
   the @class{String} class itself.

   In @ref{ch03-browseProtocol}, no specific class is selected,
   therefore the whole @class{String} protocol is listed at the
   right. The method @method{before:} implemented in
   @class{SequenceableCollection} is selected and its source code is
   displayed on the large bottom pane.

@cindex keyboard shortcut @subentry browse hierarchy (@kbd{Ctrl-h})
   @item @strong{Explore the hierarchy.} In the class pane of the
   browser, do ...@clicksequence{select @class{String} class @click{}
   right mouse button @click{} @label{Browse hierarchy
   (h)}}... Alternatively, use the keyboard shortcut @kbd{Ctrl-h} or
   the button @label{hierarchy} on the system browser.

   @figure{Browse the @class{String} hierarchy,ch03-browseHierarchy,8}

   The hierarchy browser is very like the system browser with only two
   differences:

@cindex class @subentry category
   @itemize

      @item At the far left, the class categories pane is absent,
      
      @item In the classes pane, the hierarchy of @class{String} is
      printed. It makes easy to browse @class{String} parent and
      child classes.

   @end itemize

@end enumerate

The hierarchy browser is a general tool for exploration. Unlike
the protocol browser, it does not display the entire protocol
of a class.  No inherited methods are shown, only those
defined directly in the selected class. In @ref{ch03-browseHierarchy}, the class
@class{SequenceableCollection} is selected as well as its method
@method{before:}.

The @method{before:} method extracts from a collection the element before a specified
element. When inherited in @class{String}, those elements are
@class{Character} instances:

@smalltalkExample{'1 + 3i' before: $i
@result{} $3}

Practice the tools and resolve the exercise below.

@exercise{Cut a string, cutString,@emph{Find the appropriate
method to transform 'Hello My Friend' into 'My Friend'.}}

Beware, some messages in the @class{String} protocol may obviously not
work. Observe below, the error is thrown on a @class{Character}
instance:

@smalltalkExample{'Hello My Friend' cos
@result{} MesageNotUnderstood: Character>>cos}

If you look at implementors of @method{cos}, you can
find that @class{Collection} expects to apply @method{cos}
to each member of a collection, hence a character is
asked for its cosine.

@cindex symbol
@strong{Symbol.} A symbol is very like a string but it is unique and
never duplicated.
Two references to @smalltalk{'hello'} might be to two or only
one object depending computational history.  Two references
to @smalltalk{#hello} are guarenteed to always refer to the same object.

Symbols got their name because they are used as @dfn{symbolic constants}.
You already observed how in the book we wrote message selectors as a symbol.
We use symbols because each message name must uniquely index
the code for a method.
You will use a symbol when you need to name something uniquely.

In the example below, the strings are not identical once
duplicated -- copying a string always results in a new string
-- however symbols are identical even when duplicated@footnote{To be
honest, copying a symbol just returns the original symbol.}:

@smalltalkExample{'hello' == 'hello' copy
@result{} false 
#hello  == #hello copy
@result{} true}

Now you know.  Strings can be duplicated or changed, symbols can't.

Symbols can contain space characters:

@smalltalkExample{'hello my friend' asSymbol
@result{} #'hello my friend'}

@class{Symbol} is a subclass of @class{String} and much of its behavior
is inherited. As we learn about @class{String}s we
are also learning quite a bit about symbols.

Note that many @class{String} methods are defined to return strings.

@smalltalkExample{'hello my friend' class.
@result{} String
#'hello my friend' class.
@result{} Symbol 
#'hello my friend' asCamelCase
@result{} 'helloMyFriend'
#'hello my friend' asCamelCase asSymbol 
@result{} #helloMyFriend}


@node Fun with variables
@section Fun with variables
@cindex variable
@cindex variable @subentry method
@cindex method @subentry variable @seeentry{variable}

How a variable can be fun? With @cuis{}, a variable is the name of a
box that holds a value -- an object, that's it!

A variable can hold a value of any class.  The value is strongly typed
(we can always determine its Class), but the variable (box) is not
restricted to holding a value of a single type.

One important direct consequence is that the @emph{type} of a variable
-- i.e. the class of the referenced object -- can change over
time. Observe this example:

@smalltalkExample{| a |
a @assign{} 1 / 3.
a class
@result{} Fraction
a @assign{} a + (2 / 3)
@result{} 1
a class
@result{} SmallInteger}

The initial value of the variable @smalltalk{a} was a @class{Fraction}
instance, after some calculation it ends as a @class{SmallInteger}
instance.

In fact to be honest, there is no such things as type, it is only
referenced objects which can @emph{mutate} over time into other kind
of object: a metal body structure to which you add two wheels may
become a bicycle, or a car if you add four wheels.

Therefore, to declare a method variable we just name it at the
beginning of the script and surround it by pipe characters ``|''.

A variable always holds a value.  Until we place a different value
into a variable, the variable holds the @smalltalk{nil} value, an
instance of @class{UndefinedObject}.  When we say that a value is
@dfn{bound} to a variable we mean that the named box now holds that
value.

So far we sent messages directly to objects, but we can send message to a
variable bound to an object too.

Any object responds to the message @msg{printString}.

@smalltalkExample{| msg |
msg := 'hello world!'.
Transcript show: msg capitalized printString, ' is a kind of '.
Transcript show: msg class printString; newLine.
msg := 5.
Transcript show: msg printString, ' is a kind of '.
Transcript show: msg class printString; newLine.}

@cuisNote{This ease of use has a drawback: when writing code to send
a message to a
variable bound to an object, the system does not check ahead of time
that the object
understands the message. Nevertheless there is a procedure to catch
this kind of situation when the message is actually sent.}

@node Fun with collections
@section Fun with collections
A Collection is a grouping of objects. Arrays and Lists are
collections.  We already know a @class{String} is a collection;
precisely a collection of characters.  Many kinds of Collection have
similar behaviors.

@cindex @class{Array}
An @class{Array} is a fixed size collection, and unlike a string it can
contain any kind of literal enclosed in @smalltalk{#(@tie{})}:
@smalltalkExample{"array of numbers"
#(1 3 5 7 11 1.1)
"array of mixed literals"
#(1 'friend' $& 'al')}

An Array is constructed directly using well formed @emph{literal} elements.
We will get to the meaning of this last statement when we discuss
details of the Smalltalk language.

For now, just note that using non-literal expressions to construct an
array will not work as expected:
@smalltalkExample{#(1 2/3)
@result{} #(1 2 #/ 3)}

@cindex array @subentry dynamic
Indeed, the @smalltalk{$/} is interpreted as a literal symbol and we get
basic components of ``2 / 3'' but this text is not
interpreted as a fraction. To get a fraction
inserted in the array, you use a @dfn{run-time array} or @dfn{dynamic
array}, whose elements @emph{are} expressions separated by dots and surrounded
with @smalltalk{@{ @}}:

@smalltalkExample{@{1 . 2/3 . 7.5@}
@result{} #(1 2/3 7.5)}

@cindex array @subentry operation
@cindex array @subentry size
With an array filled with numbers you can request information and
arithmetic operations:
@smalltalkExample{#(1 2 3 4) size @result{} 4
#(1 2 3 4) + 10 @result{} #(11 12 13 14)
#(1 2 3 4) / 10 @result{} #(1/10 1/5 3/10 2/5)}

@cindex collection @subentry @method{squared}
Mathematical operations work as well:
@smalltalkExample{#(1 2 3 4) squared @result{} #(1 4 9 16)
#(0 30 45 60) degreeCos
@result{} #(1.0 0.8660254037844386
0.7071067811865475 0.49999999999999994)}

@cindex array @subentry statistic
Basic statistical methods can be used directly on array of numbers:

@smalltalkExample{#(7.5 3.5 8.9) mean @result{} 6.633333333333333 
#(7.5 3.5 8.9) range @result{} 5.4
#(7.5 3.5 8.9) min @result{} 3.5
#(7.5 3.5 8.9) max @result{} 8.9}

To get an array of natural numbers from 1 to 100, we use the keyword
message @msg{to:}

@smalltalkExample{(1 to: 100) asArray
@result{} #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
92 93 94 95 96 97 98 99 100)}

In this line of code, the message @msg{to:} is sent to @smalltalk{1}
with the argument @smalltalk{100}. It returns an interval object. The
message @msg{asArray} sent to the interval returns an array.

@exercise{Negative integer numbers,exeNegativeIntegers,@emph{Create an
array of integer numbers ranging from -80 to 50.}}

@c introduce ordered collection
@cindex collection @subentry dynamic
@cindex collection @subentry @class{OrderedCollection}
@cindex collection @subentry @method{add:}
The size of an array is fixed, it can not grow. An
@class{OrderedCollection} is a dynamic, ordered collection. It grows
when adding element with the @msg{add:} message:
@smalltalkExampleCaption{Dynamic size collection,dynamicSize,
| fibo | 
fibo := OrderedCollection newFrom: #(1 1 2 3).
fibo add: 5;
   add: 8;
   add: 13;
   add: 21.
fibo
@result{} an OrderedCollection(1 1 2 3 5 8 13 21)}

@cindex collection @subentry @method{at:}
@cindex collection @subentry @method{last}
@cindex collection @subentry @method{indexOf:}
Index access to the elements of a collection is done with a variety of
messages. The index naturally ranges from 1 to the collection size:
@smalltalkExample{fibo at: 1 @result{} 1
fibo at: 6 @result{} 5
fibo last @result{} 21
fibo indexOf: 2 @result{} 3
fibo at: fibo size @result{} 21}


@subheading Playing with enumerators
A collection comes with a set of helpful methods named
enumerators. Enumerators operate on each element of a collection.

@cindex collection @subentry set operations (union, intersection, difference)
Set operations between two collections are computed with the
@msg{union:}, @msg{intersection:} and @msg{difference:} messages.
@smalltalkExampleCaption{Set operations,setOpe,
#(1 2 3 4 5) intersection: #(3 4 5 6 7)
@result{} #(3 4 5)
#(1 2 3 4 5) union: #(3 4 5 6 7)
@result{} a Set(5 4 3 2 7 1 6) 
#(1 2 3 4 5) difference: #(3 4 5 6 7)
@result{} #(1 2)}

@exercise{Hole in a set,holeSet,@emph{Construct the array of the
numbers 1@comma{}...@comma{}24@comma{}76@comma{}...@comma{}100.}}

Set operations work with any kind of object. Comparing objects
deserves its own section.

@smalltalkExample{#(1 2 3 'e' 5) intersection: #(3.0 4 6 7 'e')
@result{} #(3 'e')}

@cindex collection @subentry @method{select:}
@cindex collection @subentry enumerator mechanism
@cindex block
To select the prime numbers from 1 to 100, we use the @msg{select:}
enumerator. This message is sent to a collection, then it will select
each element of the collection returning true to a test condition:

@smalltalkExampleCaption{Select prime numbers between 1 and 100,prime100,
(1 to: 100) select: [ :n | n isPrime ]
@result{}  #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71
73 79 83 89 97)}

This example introduces the message @msg{select:} and block of code, a
primordial constituent element of the @cuis{} model. A block of code,
delimited by square brackets, is a piece of code for later
execution(s). Let's explain how this script is evaluated:

@itemize

 @item @smalltalk{(1 to: 100)} is evaluated as an interval

 @item the block of code @smalltalk{[:n | n isPrime]} is instantiated (created)

 @item the message @msg{select:} is sent to the interval with the
 block of code as the argument
@cindex block @subentry parameter
 @item in the @method{select:} method, for each integer of the
 interval, the block of code is invoked with its parameter
 @smalltalk{n} set to the integer value.  A @dfn{block parameter}
 starts with a colon, ``:'', and is an ordinary identifer @footnote{An
 @dfn{identifier} is just a word that starts in a lower case letter
 and consists of upper and lower case letters and decimal digits.  All
 variable names are identifiers}.  Then, each time @smalltalk{n
 isPrime} evaluates to true, the @smalltalk{n} value is added to a new
 collection answered when the @smalltalk{select:} method finished
 testing each element of the collection.

@end itemize

A block of code can be saved in a variable, passed as a parameter, and
can be used multiple times.
@smalltalkExample{
| add2 |
 add2 := [:n| n + 2].
 @{ add2 value: 2. add2 value: 7 @}.
@result{}  #(4 9)}


Enumerators implement tremendously powerful ways to process collections without
the need of index.  By this we mean that they are simple to get right.
We like simple!

To get an idea of how useful enumerators are, take a browse at the
@class{Collection} class in the method category @smalltalk{enumerating}.

@exercise{Odd integers,oddNumbers,@emph{Select the odd number between
-20 and 45.}}

You want to know the number of prime numbers under 100.  Just send the
message @msg{size} to the answered collection at @ref{prime100}. The
parenthesis are mandatory to ensure @msg{size} is sent last to the
resulting collection:

@smalltalkExampleCaption{Quantity of prime numbers between 1 and
100,qtyPrime100, ( (1 to: 100) select: [:n | n isPrime] ) size
@result{} 25}

For more clarity, we use a variable named @smalltalk{primeNumbers} to
remember about the prime numbers list we build:
@smalltalkExample{| primeNumbers |
primeNumbers := (1 to: 100) select: [:n | n isPrime].
primeNumbers size}

@exercise{Number of prime number between 101 and
200,qtyPrime200,@emph{Modify @ref{qtyPrime100} to calculate the number
of prime numbers between 101 and 200.}}

@exercise{Multiples of 7,multiples7,@emph{Build the list of the
multiples of 7 below 100.}}

@exercise{Odd and non prime integers,oddNonPrime,@emph{Build a
collection of the odd integers in [1 ; 100] which are not prime.}}

@cindex collection @subentry @method{collect:}
A sister enumerator to @msg{select:} is @msg{collect:}. It returns a
new collection of the same size, with each element transformed by a
block of code. When searching perfect cubic roots, it is useful to
know about some cubes:

@smalltalkExampleCaption{Collect cubes,cubesCollect,
(1 to: 10) collect: [:n | n cubed]
@result{} #(1 8 27 64 125 216 343 512 729 1000)}

The collected elements can be of a different type. Below, a string is
enumerated and integers are collected:

@smalltalkExample{'Bonjour' collect: [:c | c asciiValue ]
@result{}  #(66 111 110 106 111 117 114)}

We can shift the ascii value, convert back to character then collect
in a new string. It is a simple cipher:
@smalltalkExampleCaption{Simple cipher,simpleCipher,
'Bonjour' collect: [:c | (c asciiValue + 1) asCharacter ]
@result{} 'Cpokpvs'}

@exercise{Cipher decode,decodeCipher,@emph{Write the script to decode
cipher 'Zpv!bsf!b!cptt', it was encoded with @ref{simpleCipher}.}}

@cindex Caesar cipher
The Caesar's cipher is based on shifting letter to the right in the
alphabet order.  The method is named after Julius Caesar, who used it
in his private correspondence with a shift of 3.

@exercise{Alphabet Caesar's cipher,alphabetCipher,@emph{Write a script
to collect the alphabet upper letters representing the Caesar's
cipher. The expected answers is} #($D $E $F $G $H $I $J $K $L $M $N $O
$P $Q $R $S $T $U $V $W $X $Y $Z $A $B $C).}

Once you get the alphabet cipher right, you can encode your first
message:
@exercise{Encode with Caesar's cipher,encodeCaesar,@emph{Encode the
phrase 'SMALLTALKEXPRESSION'.}}

And decode message:

@exercise{Decode with Caesar's cipher,decodeCaesar,@emph{Decode this famous quotation attributed to Julius Caesar 'DOHDMDFWDHVW'.}}

@subheading Fun with loops
Collection can be iterated with traditional loops: there is a whole
family of @emph{repeat}, @emph{while} and @emph{for} loops.

@cindex loop @subentry for
@cindex number @subentry @method{to:do}
A simple @emph{for} loop between two integer values is written with
the keyword message @msg{to:do:}, the last argument is a block of code
executed for each index:
@smalltalkExampleCaption{A @emph{for} loop,forLoop,
| sequence |
sequence := OrderedCollection new.
1 to: 10 do: [:k | sequence add: 1 / k].
sequence
@result{} an OrderedCollection(1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 1/10)}

@cindex collection @subentry @method{collect:}
A collect writes more concisely, though:
@smalltalkExample{(1 to: 10) collect: [:k | 1 / k]}

@cindex loop @subentry for @subentry step
@cindex number @subentry @method{to:do:by:}
To step with a different value than 1, a third numeric argument is
inserted:
@smalltalkExample{1 to: 10 by: 0.5 do: [:k | sequence add: 1 / k]}

@cindex loop @subentry repeat
@cindex Fibonacci sequence
A repeated loop without index or any collection is written with the
@msg{timesRepeat:} message send to an integer:
@smalltalkExampleCaption{A @emph{repeat} loop, repeatLoop,
| fibo |
fibo := OrderedCollection newFrom: #(1 1).
10 timesRepeat: [
   fibo add: (fibo last + fibo atLast: 2)].
fibo
@result{} an OrderedCollection(1 1 2 3 5 8 13 21 34 55 89 144)}

@cindex collection @subentry @method{pairsDo:}
The quotient of consecutive Fibonacci terms converge toward the golden
value:
@smalltalkExample{fibo pairsDo: [:i :j |
   Transcript show: (j / i ) asFloat ; cr]
@result{} 1.0
@result{} 1.5
@result{} 1.6
@result{} 1.6153846153846154
@result{} 1.6176470588235294
@result{} 1.6179775280898876}


@node Collections detailed 
@section Collections detailed 
@cindex collection
The @label{Collections-} class categories are the most prolific,
there are 7 of them gathering 46 classes.

@c explain category Collections-Abstract
@cindex class @subentry abstract
The category @label{Collections-Abstract} groups classes which are
said to be abstract. An @dfn{abstract} class cannot be instantiated,
its behavior is declared but not completely implemented. It is the
responsibility of its subclasses to implement the missing part of the
behavior.

An abstract class is useful to establish a set of polymorphic methods
which each of its concrete subclasses are expected to specialize.
This captures and communicates our intent.

Observe how the important @method{do:} method is declared
but not implemented:

@smalltalkExample{Collection>>do: aBlock 
"Evaluate aBlock with each of the receiver's elements as the argument."
self subclassResponsibility}

Then observe how two different @class{Collection} subclasses
implement it:

@smalltalkExample{OrderedCollection>>do: aBlock 
firstIndex to: lastIndex do: [ :index |
   aBlock value: (array at: index) ]}

and:

@smalltalkExample{Dictionary>>do: aBlock
super do: [:assoc | aBlock value: assoc value]}

@c distinguish growable and non-growable collection Array (Collections-Arrayed) and OrderedCollection
@c (Collections_Sequenceable)

Two important groups of collections must be distinguished: collection
with a fixed size and collection with a variable size.

@cindex collection @subentry fixed size
@strong{Collection of fixed size.}  Such collections are gathered in
the category @label{Collections-Arrayed}. The most notable one is
@class{Array}, its size -- the number of elements it can hold -- is
set when creating the instance. Once instantiated, you can neither add nor
delete elements to an array.

@cindex collection @subentry instantiate array
@cindex @class{Array}

There are different ways to create @class{Array} instance:

@smalltalkExampleCaption{Collection with a fixed size,createArray,
array1 := #(2 'Apple' $@@ 4) "create at compile time"
array1b := @{2 . 'Apple' . 2@@1 . 1/3 @} "created a execution time"
array2 := Array with: 2 with: 'Apple' with: 2@@3 with: 1/3.
array3 := Array ofSize: 4 "an empty array with a 4 element capacity"}

Array @smalltalk{array1} and @smalltalk{array1b} are bit
different. The former one is created and filled with its contents at
compile time of the code, the consequence is it can only be filled
with literal elements as integer, float, string. The later one is
created at execution time of the code, it can be filled with elements
instantiated at the execution time as @class{Fraction} or
@class{Point} instances.

@cindex collection @subentry access element
You can access elements with an important variety of messages:
@smalltalkExampleCaption{Collection access to elements,collectionAccess,
array1 first @result{} 2
array1 second @result{} 'Apple'
array1 third @result{} $@@
array1 fourth @result{} 4
array1 last @result{} 4
array1 at: 2 @result{} 'Apple'
array2 at: 3 @result{} 2@@3
array2 swap: 2 with: 4 @result{} #(2 1/3 2@@3 'Apple') 
array1 at: 2 put: 'Orange'; yourself @result{} #(2 'Orange' $@@ 4)
array1 indexOf: 'Orange @result{} 2}

Use the System Browser to discover alternative way to access elements
of a collection.

@exercise{Access part of a collection, collFirst, @emph{What is the
appropriate message to access the first 2 elements of the
@smalltalk{array1} collection?}}

You can't add or remove an element, though:

@smalltalkExample{array1 add: 'Orange'
@result{} Error: 'This message is not appropriate for this object'
array1 remove: 'Apple'
@result{}  Error: 'This message is not appropriate for this object'}

Nevertheless, it is possible to fill at once an array:

@exercise{Fill an array,fillArray, @emph{Fill every element in
@smalltalk{array1} with 'kiwi' all at once?}}

@cindex collection @subentry variable size
@strong{Collection of variable size.}  Such collection are gathered in
several class categories: @label{Collections-Unordered},
@label{Collections-Sequenceable}, etc. They represent the most common
collections.

@class{OrderedCollection} is a notable one. Its elements are ordered:
elements are added one after the other in sequence@footnote{Of course you can
insert an element between two elements. However @class{LinkList}
instance are more efficient for this use case.}. Its size is
variable depending on added or removed elements.

@cindex collection @subentry instantiate variable size array
@cindex @class{OrderedCollection}

@smalltalkExampleCaption{Collection with a variable size, createOrderedColl,
coll1 := @{2 . 'Apple' . 2@@1 . 1/3 @} asOrderedCollection
coll2 := OrderedCollection with: 2 with: 'Apple' with: 2@@1 with: 1/3
coll3 := OrderedCollection ofSize: 4}

The access to elements is identical to an @class{Array}
instance, but dynamic collections allow you to add and remove elements:

@smalltalkExampleCaption{Adding@comma{} removing element from a
dynamic array,remDelArray,
coll1 add: 'Orange'; yourself
@result{} an OrderedCollection(2 'Apple' 2@@1 1/3 'Orange')
coll1 remove: 2@@1; yourself
@result{} an OrderedCollection(2 'Apple' 1/3)} 

@c exercise with ordered collection
@exercise{Add an element after,addAfter, @emph{How to add 'Orange' after
'Apple' in @smalltalk{coll1}?}}

@c Explain in detail Dictionary and Set
@cindex @class{Set}
@cindex collection @subentry @class{Set}
@strong{Set.} @class{Set} is an unordered collection without duplicated
elements. The order of the element is not guaranteed, though. Observe
how pi is the first element of the set:

@smalltalkExampleCaption{Set collection, setCollection,
set := Set new.
set add: 1; add: Float pi; yourself
@result{} a Set(3.141592653589793 1)}

Non duplicate are guaranteed at least, even with number of different
types. Observe how @smalltalk{1}, @smalltalk{3/3} and @smalltalk{1.0}
are considered equal and not duplicated in the set:

@smalltalkExampleCaption{Set@comma{} without duplicates, setWithoutDuplicates,
set := Set new.
set add: 1; add: Float pi; add: 3/3; add: 1/3; add: 1.0; yourself
@result{} a Set(1/3 3.141592653589793 1)}


@cindex collection @subentry convert
A very handy way to create a @class{Set} instance, or any other
collection, is to create a dynamic array and convert it with the
@msg{asSet} message:

@smalltalkExampleCaption{Convert dynamic array, convertDynArray,
@{1 . Float pi . 3/3 . 1/3 . 1.0@} asSet
@result{} a Set(3.141592653589793 1/3 1)}

Observe the alternate conversion messages:

@smalltalkExample{@{1 . Float pi . 3/3 . 1/3 . 1.0@} asOrderedCollection
@result{} an OrderedCollection(1 3.141592653589793 1 1/3 1.0) 

@{1 . Float pi . 3/3 . 1/3 . 1.0@} asSortedCollection
@result{} a SortedCollection(1/3 1 1 1.0 3.141592653589793)}

To uniquely collect the divisors list of 30 and 45 (not the common divisors):

@smalltalkExample{Set  new 
   addAll: #(1 2 3 5 6 10 15 30) ; 
   addAll: #(1 3 5 9 15 45) ; 
   yourself. 
@result{} a Set(5 10 15 1 6 30 45 2 3 9)}

@exercise{Letters, setLetters, @emph{How will you collect the letters in
the sentences 'buenos d@'{@dotless{i}}as' and 'bonjour'?}}

@cindex collection @subentry @class{Dictionary}
@cindex @class{Dictionary}
@strong{Dictionary.} A dictionary is a list of associations between a
key and an object. Of course a key is an object, but it must respond
to equality tests. Most of the time, symbols are used as keys.

To compile a list of colors:

@smalltalkExampleCaption{Dictionary of colors, colorDict,
| colors |
colors := Dictionary new.
colors
   add: #red -> Color red;
   add: #blue -> Color blue;
   add: #green -> Color green}

There are shorter descriptions:
@smalltalkExample{colors := Dictionary newFrom:
   @{#red -> Color red . #blue -> Color blue . #green -> Color green@}.
colors := @{#red -> Color red . #blue -> Color blue .
   #green -> Color green@} asDictionary}

You access color by symbols:

@smalltalkExample{colors at: #blue
@result{} Color blue
colors at: #blue put: Color blue darker
colors at: #yellow ifAbsentPut: Color yellow
@result{} association `#yellow -> Colors yellow` added to the dictionary}


There are different way to access a dictionary contents:

@smalltalkExample{colors keys.
@result{} #(#red #green #blue) 
colors keyAtValue: Color green
@result{} #green}

@strong{Beware.} The classic enumerators iterate the values of the
dictionary:

@smalltalkExample{colors do: [:value | Transcript show:  value; space ]
@result{} (Color r: 1.000 g: 1.000 b: 0.078) (Color r: 0.898 g: 0.000 b: 0.000)...}

Sometimes, you really need to iterated the whole key-value association:

@smalltalkExample{colors associationsDo: [:assoc | 
   Transcript show: assoc key; space; assoc value; cr ]}

There are other variants to explore by yourself.

@exercise{Color by name, nameColor, @emph{With an appropriate
enumerator, how will you edit the contents of the @smalltalk{colors}
dictionary to replace its values with a nicely capitalized string
representing the name of the color?}}

@c The other kind of collection should be self-discoverable
There are many more collections to explore. You now know enough to
explore and to search by yourself with the System Browser, and to
experiment with the Workspace.


@node SpaceWar! collections
@section SpaceWar! collections

@subsection Instantiate collections
Whenever you need to deal with more than one element of the same
nature -- instances of the same class -- it is a clue to use a
collection to hold them. Moreover, when these elements are of fixed
quantity, it indicates more precisely you want to use an @class{Array}
instance. An @class{Array} is a collection of fixed size. It can not
grow nor shrink.

When this quantity is variable, you want to use an
@class{OrderedCollection} instance. It is a collection of variable
size, it can grow or shrink.

SpaceWar! is a two-players game, there will be always two players
and two space ships. We use an @class{Array} instance to keep
reference of each space ship.

Each player can fire several torpedoes; therefore the game play holds
zero or more torpedoes -- hundreds if we decide so. The torpedoes
quantity is variable, we want to use an @class{OrdredCollection}
instance to keep track of them.

In the @class{SpaceWar} class, we already defined two instance
variables @smalltalk{ships} and @smalltalk{torpedoes}. Now, we want an
@method{initializeActors} method to set up the game with the involved
actors -- central star, ships, etc. Part of this initialization is to
create the necessary collections.

See below an incomplete implementation of this method:

@smalltalkExampleCaption{Incomplete game initialization, initActors,
SpaceWar>>initializeActors
   centralStar @assign{} CentralStar new.
   ../..
   ships first 
      position: 200 @@ -200;
      color: Color green. 
   ships second
      position: -200 @@ 200;
      color: Color red}

@exercise{Collections to hold the ships and torpedoes, initActorsCollections,
@emph{The example above does not show the creation of the
@smalltalk{ships} and @smalltalk{torpedoes} collections. Replace
``../..'' with lines of code where these collections are
instantiated and if necessary populated.}}


@subsection Collections in action
@c Show the update code, explain a bit the physics

The space ship and the torpedo objects are responsible of their
internal states. They understand the @msg{update:} message to recompute
their position according to the mechanical laws.

A fired torpedo has a constant velocity, no external forces is applied
to it. Its position is linearly updated according to the time
elapsed. The @smalltalk{t} parameter in the @msg{update:} message is
this time interval.

@smalltalkExampleCaption{Torpedo mechanics, torpedoMechanic,
Torpedo>>update: t
"Update the torpedo position"
   position @assign{} velocity * t + position.
   ../..}

A space ship is put under the strain of the star's gravity pull and
the acceleration of its engines. Therefore its velocity and position
change accordingly to the mechanical laws of physics.

@smalltalkExampleCaption{Space ship mechanics, spaceShipMechanic,
SpaceShip>>update: t
"Update the ship position and velocity"
   | ai ag newVelocity |
   "acceleration vectors"
   ai @assign{} acceleration * self direction.
   ag @assign{} self gravity.
   newVelocity @assign{} (ai + ag) * t + velocity.
   position @assign{} (0.5 * (ai + ag) * t squared) + (velocity * t) + position.
   velocity @assign{} newVelocity.
   ../..}

@cuisNote{Remember that Smalltalk does not
follow the mathematics precedence of arithmetic operators.
These are seen as ordinary @strong{binary
messages} which are evaluated from the left to the right when there
is no parenthesis. For example, in the code fragment
@smalltalk{...(velocity * t)...}, the parenthesis are mandatory to get
the expected computation.}

@c Explain the direction and gravity methods.
Observe in this previous method how the direction and the gravity are
defined in two specific methods.

The @msg{direction} message asks for the unit vector representing the
nose direction of the spaceship:

@smalltalkExampleCaption{Space ship direction method,spaceShipDirection,
SpaceShip>>direction
"I am an unit vector representing the nose direction of the mobile"
   @return{} Point rho: 1 theta: self heading}

The @msg{gravity} message asks for the gravity vector the space ship
is subjected to:

@smalltalkExampleCaption{Space ship gravity,spaceShipGravity,
SpaceShip>>gravity
"Compute the gravity acceleration vector"
   | position |
   position @assign{} self morphPosition.
   @return{} [-10 * self mass * owner starMass / (position r raisedTo: 3) * position]
      on: Error do: [0 @@ 0]}

@c Explain the SpaceWar step method
The game play is the responsibility of a @class{SpaceWar} instance. At
a regular interval of time, it refreshes the states of the game
actors. A @method{stepAt:} method is called at a regular interval of time
determined by the @method{stepTime} method:

@smalltalkExampleCaption{Regular refresh of the game play, reflreshGamePlay,
SpaceWar>>stepTime
"millisecond"
   @return{} 20

SpaceWar>>stepAt: millisecondSinceLast
   ../..
   ships do: [:each | each unpush].
   ../..}

@c Ask the reader to write the code to update the ship and torpedo position
In the @method{stepAt:} method, we intentionally left out the details to
update the ship and torpedoe positions. Note: each ship is sent
regularly an @msg{unpush} message to reset its previous @msg{push}
acceleration.

@exercise{Update all ships and torpedoes, updateShipsTorpedoes,
@emph{Replace the two lines ``../..'' with code to update the ships
and the torpedoes positions and velocities.}}


Among other things, the game play handles the collisions between the
various protagonists. Enumerators are very handy for this.

Ships are hold in array of size 2, we just iterate it with a @msg{do:}
message and a dedicated block of code:

@smalltalkExampleCaption{Collision between the ships and the Sun,shipSunCollision,
SpaceWar>>collisionsShipsStar
   ships do: [:aShip | 
      (aShip morphPosition dist: centralStar morphPosition) < 20 ifTrue: [
         aShip flashWith: Color red.
         self teleport: aShip]
   ]}
