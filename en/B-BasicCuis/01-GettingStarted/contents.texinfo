@node Getting started
@chapter Getting started

@menu
* Installing and configuring @cuis{}::
* Writing your first scripts::
* Introduction to the system classes::
@end menu
                                   
@node Installing and configuring @cuis{}
@section Installing and configuring @cuis{}
@cuis{} is an environment and a programming language executed on a
virtual computer. Therefore it is essentially based on two components:
the Smalltalk @dfn{virtual machine} conceptualizing this virtual
computer and an @dfn{image} representing the state of this computer.

The virtual machine is an executable program running on a dedicated
host (GNU/Linux, Mac OS X, Windows, etc.). It is called the @dfn{Open
Smalltalk Virtual Machine}, or Squeak @vm{} in short. There are
different flavors of @vm{}, one for each combination of Operating
System and CPU architecture. Therefore, one @vm{} compiled
for Windows in Intel architecture will not work on Linux in
ARM architecture. You need the specific @vm{} compiled for
the combination of Operating System and CPU architecture
your computer is based on.

The image is a regular file feeding the @vm{} with all the objects
 defining the state of the virtual computer. These objects are
 classes, methods, instances of those classes as numbers, strings,
 windows, debuggers whatever existed when the state of the virtual
 computer was saved. An image file saved on a given Operating System
 and CPU architecture run identically on another system as
 long as the same @vm{} version is used.

What makes @cuis{} special is the living entities in the image: its
classes population and arrangement, how they inherit from each
other. The @cuis{} moto is to be a tiny, coherent and human
understandable Smalltalk environment; its class population is inferior
to 500.

To get you started easily, @url{http://cuis-Smalltalk/BooResources,we
provide three archives} for GNU/Linux, Mac OS X and Windows on Intel
architecture. These archives come with the dedicated @vm{} and the
image of @cuis{} @value{cuisVersion}. Into this image we pre-installed
a few packages to make your life easier when you experience the
examples and exercises of the book. At the reading time of this book,
@cuis{} has likely evolved with a more recent version, nevertheless
your learning is transferable to more recent version of @cuis{}.

To get @cuis{} running on your computer, follow the instructions in
the @file{README} file accompanying the archive. Once you get @cuis{}
running, read the information displayed on the windows. When you are
done, close these windows, next you will adjust @cuis{} to your
preferences.

@subsection Editing your preferences
Once you read the instructions on the default windows, the second
things you want to do is to adjust its visual properties to fit your
preferences and needs. To do so, access the World menu
...@clicksequence{Background click @click{} Preferences...} then
select the pin on the top right of the menu to make it permanent. Here
you have the most important options: the choice for the @strong{font
size}, the @strong{themes} whenever your prefer light or dark
colouring. There are other preferences you can explore by
yourself. Once you are done, access again the World menu
...@clicksequence{Background click @click{} Save}... to make your
preferences permanent. In this book, we keep the default @cuis{}
theme, we suggest you to do the same so your environment reflects the
book screenshots.

@subsection Fun with window placement
@cindex tools, workspace
The first tool to discover is the @dfn{Workspace} tool. It is a kind
of text editor to key in Smalltalk code you can execute
immediately. Do a ...@clicksequence{Background click @click{}
Open... @click{} Workspace}...

Now we ask @cuis{} to make the windows placement: click the blue icon
(top left) to access the window option and experiment with the white
area to place the Workspace window at the half left of the @cuis{}
environment.

@figure{Window options,B-01-img1,7}

The @option{resize...} option even offers more freedom to place the
window. Resolve the following exercise:

@exercise{Middle placement,exePlacement, @emph{Use the
@option{resize...} option to place the Workspace centered on @cuis{}
environment.}}

@node Writing your first scripts
@section Writing your first scripts
In this section we present a few scripts so you will get a taste and
feeling about Smalltalk code. The examples are associated with small
exercises to experiment with and accompanied with solutions in the
annex. We intentionally keep the details of the syntax out of this
section.

Smalltalk script are usually written in a Workspace. The usual
@emph{Hello world!} program is written as:

@smalltalkExampleCaption{The traditional 'Hello World!' program,hello,
Transcript show: 'Hello World'}

@cindex tools, transcript
To execute this code, select it with the mouse and
...@clicksequence{right mouse click @click{} Do it (d)}...  Nothing
happen! Indeed to see the output, you need a @dfn{Transcript} window,
it is a place where programmer send information for the user as we are
doing in our example. Do ...@clicksequence{Background click @click{}
Open... @click{} Transcript}... and execute again the code.

@figure{Transcript window with output,B-01-img2,3}

This code comes in three parts:

@itemize

@item the literal @smalltalk{'Hello World!'}  

@item the message @msg{show:} with its argument @smalltalk{'Hello World!'}

@item the class @class{Transcript} receiving the message @msg{show:} with its argument

@end itemize

The action of printing takes place in the class
@class{Transcript}. The code execution is invoked with keyboard
shortcuts @kbd{Ctrl-A} then @kbd{Ctrl-D} (@emph{@b{D}o it}).

@smalltalkExampleCaption{Multiple lines, hello2,
Transcript show: 'Hello World!'.
Transcript newLine.
Transcript show: 'I am Cuising'}

In this three lines script, observe how the line are separated by a
dot ``.''. It is really a line separator not needed in the third line
nor in a one line script. The message @msg{newLine} has no argument.

@cindex cascade of messages
In the @ref{hello2} example, the message @msg{show:} and @msg{newLine}
are sent to the same @class{Transcript} class. In such circumstance,
we can use the cascade technique to avoid this repetition. The
receiver @class{Transcript} is written once and the sent messages are
separated by semicolon:

@smalltalkExampleCaption{Cascade of message, helloCascade,
Transcript
   show: 'Hello World!';
   newLine;
   show: 'I am Cuising'}

Observe the text layout to ease code understanding. It is possible to
write the cascade of messages in one line, but it reduces the
readability of the code:

@smalltalkExample{Transcript show: 'Hello World!'; newLine; show: 'I
am Cuising'}

The @class{Transcript} class is most of the time used to output useful
information when developing an application. As an alternative to the
@kbd{Ctrl-d} shortcut, @kbd{Ctrl-p} (@emph{@b{P}rint it}) executes the
script and prints in the Workspace the result of the last line of the
script.

@subsection Fun with numbers
@cindex number, integer

In your Workspace, to compute a factorial execute the example bellow
with @kbd{Ctrl-a} then @kbd{Ctrl-p}:
@smalltalkExample{100 factorial
@result{}  9332621544394415268169923885626670049071596826438162146859
29638952175999932299156089414639761565182862536979208272237582
51185210916864000000000000000000000000}

@cuis{} handles very large integer number without the need to use
special type or method. To convince yourelf try the example bellow:
@smalltalkExample{10000 factorial / 9999 factorial
@result{} 10000}

If you execute and print with @kbd{Ctrl-p} @smalltalk{10000
factorial}, you realize it takes far more time to print one factorial
than computing two factorials and a division. The result is an integer
as expected, not a decimal number answer as many computer languages
will return.

As we are discussing division, you may not get the result you think:
@smalltalkExample{15 / 4
@result{} 15/4}

It looks like @cuis{} is lazy because it does not respond the decimal
number @smalltalk{3.75} as we were expecting. In fact @cuis{} wants to
be as accurate as possible, and its answer is a fraction number! After
all, fraction number are just division we are too lazy -- because it
is troublesome -- to compute, @cuis{} does just that!

Try out this to understand what is happening underneath:
@smalltalkExample{(15 / 4) + (1 / 4)
@result{} 4}

Is it not wonderful? @cuis{} computes with rational numbers. We
started with division and addition operations on integer, and we got
an accurate result thanks to intermediate computation on rational
numbers.

@cuisNote{In the example, observe how the parenthesis are used
although in arithmetic calculus the division is operated first. With
@cuis{} you need to explicit the order of operation with
parenthesis. We will explain why in Part Two.}

@exercise{Inverse sum,inverseSum, @emph{Write the code to compute the
sum of the first four integer inverses.}}
@cindex number, root
@cindex number, @msg{sqrt}
@cindex number, @msg{squared}
All four arithmetic operations and mathematical functions are
compatible with the rational number representation:
@smalltalkExample {(15 / 14) * (21 / 5) @result{} 9 / 2
(15 / 14) / ( 5 / 21) @result{} 9 /2 
(3 / 4) squared @result{} 9 / 16
(25 / 4) sqrt @result{} 5 / 2}

@exercise{Sum of the squares,squaredSum,Write the code to compute the
sum of the squares of the inverse of the first four integers.}

@cindex number, decimal division
If @cuis{} divides integer as rational number, how to compute the
decimal division? One option is to write a number as a @dfn{Float}, it
is the decimal representation in programming language, the integer
part and fractional parts are separated by a dot ``.'':
@smalltalkExample{ 15.0 / 4 @result{}3.75
15 / 4.0 @result{} 3.75}

Another option is to convert an integer to a float with the
@msg{asFloat} message. It is very useful when the integer is in a
variable:

@smalltalkExample{15 asFloat / 4
@result{} 3.75}

@cindex number, integer division
Alternatively to the decimal division, you ask integer division with
the message @msg{//}:
@smalltalkExample{15 // 4
@result{} 3}

@cindex number, division reminder
The reminder of the Euclidean division is computed with the message
@msg{\\\\}:
@smalltalkExample{15 \\\\ 4
@result{} 3}


@cindex number, @msg{odd}
@cindex number, @msg{even}
@cindex number, @msg{isPrime}
@cindex number, @msg{isDivisibleBy:}
@cuis{} knows some arithmetic operations to test if an integer is an
odd, even or prime number. You just send the appropriate message to
the number:

@smalltalkExampleCaption{Testing on integer,integerBasicTest,
25 odd @result{} true
25 even @result{} false
25 isPrime @result{} false
23 isPrime @result{} true
91 isDivisibleBy: 7 @result{} true
117 isDivisibleBy: 7 @result{} false
117 isDivisibleBy: 9 @result{} true}

@cindex number, @msg{gcd:}
@cindex number, @msg{lcm:}
With specific @dfn{keyword messages} you compute the Least Common
Multiple and Greatest Common Divisor. A keyword message is composed of
one or several colon(s) ``:'' to insert argument(s):

@smalltalkExample{12 lcm: 15 @result{} 60
12 gcd: 15 @result{} 3}
Integer can be printed in different forms:

@cindex number, roman
@cindex number, as words
@cindex number, base
@smalltalkExample{
2020 printStringRoman @result{} 'MMXX' 
2020 printStringWords  @result{} 'two thousand, twenty'
"Number as the Maya did"
2020 printStringBase: 20 @result{} '510'}


@subsubheading Hiatus with decimal numbers
@cindex number, decimal
We saw decimal numbers are written with a dot ``.'' to separate the
integer and the decimal parts: @smalltalk{1.5}, @smalltalk{1235.021}
or @smalltalk{0.5}. The number @smalltalk{0.00004} is more easily
written @smalltalk{4e-5}; it means 4 preceded by 5 zeros or 4 as the
fifth digit after the decimal dot.

@strong{Attention.} Computer represents decimal number
imprecisely. You need to be aware of that when doing computation and
equality comparison. Most system hides these errors because there are
very tiny errors. @cuis{} does not hide these inaccuracy.

@smalltalkExampleCaption{Computer dyscalculia!,FloatPrecision,
0.1 + 0.2 - 0.3
@result{} 5.551115123125783e-17}

In @ref{FloatPrecision}, the returned value should be zero but it is
not the case. The computer returns @smalltalk{5.55e-17}, or
@smalltalk{0.0000000000000000555}, it is very close to zero, but there
is an error.

@exercise{Miscellaneous calculus errors with decimal
number,exeFloatPrecision,@emph{Give 3 calculus showing errors compare
to the expected results.}}

When accuracy is absolutely mandatory use the Rational Numbers
representation of @cuis{}.

@cindex number, rational
@cindex number, fraction
A rational number is written with the division symbol between two
integers: do @kbd{Ctrl-p} on @smalltalk{5/2} @result{}
@smalltalk{5/2}. @cuis{} returns a fraction, it does note compute a
decimal.

@exercise{Toward the infinite,exeZeroDivide, @emph{What happen when
executing this code} @smalltalk{5/0}@emph{?}}

Let's come back to our computer dyscalculia with decimal numbers. When
using the rational numbers, the @ref{FloatPrecision} becomes:

@smalltalkExampleCaption{Right with fraction!,FractionPrecision,
(1/10) + (2/10) - (3/10)
@result{} 0}

This time we have the expected result. Underneath the computer only
does calculus with integers.

@exercise{Fix the errors,exeFractionPrecision, @emph{Return to
@ref{exeFloatPrecision} and use rational writing to represent decimal
numbers. The errors are gone.}}

@cuis{} knows how to convert a decimal number as a fraction, by
sending the message @msg{asFraction}. We already acknowledged the
computer dyscalculia trouble with decimal number, this is why when
asking for a fraction representation we have this strange answer. The
internal computer represenation of @smalltalk{1.3} is not exactly as
it seems:

@smalltalkExample{1.3 asFraction
@result{} 5854679515581645/45035996273704}

@subsection Fun with texts
@cindex string
A @dfn{String} is the way text are represented in programming
language, it is a collection of characters. We already met string with
our first script, it is enclosed in double quotes ``"'':
@smalltalk{"hello world!"}. We capitalize it with the @msg{capitalized}:

@cindex string, capitalized
@smalltalkExample{'hello world!' capitalized
@result{} 'Hello world!' }

@exercise{Capitalize number as words,capWordNumber,@emph{Print 2020 as
words capitalized.}}

@cindex string, concatenate
Two strings are concatenated with the @msg{,} message
@smalltalkExample{'Hello', ' ', 'my beloved', ' ', 'friend'
@result{} 'Hello my beloved friend'}

@cindex string, character access
Access to a character in a string is done with the keyword message
@msg{at:} and its index position in the string:
@smalltalkExample{'Hello' at: 1 @result{} $H
'Hello' at: 5 @result{} $0}

Observe how a character is prefixed with the ``$'' symbol.

@strong{Caution.} The index position starts naturally from 1 to the
string length.

To change one character, use the companion two keywords message
@msg{at:put:}. The argument must be noted as a character:
@smalltalkExample{'Hello' at: 2 put: $a; yourself
@result{} 'Hallo'}

Observe the use of the cascade with the @msg{yourself} message. It is
sent to the instance string to get it returned.

@exercise{Hello to Belle,helloBelle, @emph{Replace each character of
the string 'Hello' to become 'Belle'}}

@cindex character, ascii
Character can be converted to integer and integer to character:
@smalltalkExample{$A asciiValue @result{} 65
(65 + 25) asCharacter @result{} $Z}

@cindex string, shuffled
@cindex collection, shuffled
Shuffling a string is funny but without much use. Nevertheless,
shuffling apply to any kind of collection, not only to string, and it
proves to be of some use as we may see later:
@smalltalkExample{'hello world' shuffled
@result{} 'wod llreohl'}

@cindex string, @msg{sorted}
We can write the same about sorting a string:
@smalltalkExample{'bonjour' sorted
@result{}#($b $j $n $o $o $r $u)}

@subsection Fun with variables
@cindex variable
How a variable can be fun? With @cuis{}, a variable is untyped, it
is only a reference to an object of any nature. Therefore to declare a
variable we name it at the beginning of the script and surround it by
pipe ``|''.

So far we sent messages directly to objects, we can send message to a
variable bounded to an object too.

@strong{Caution.} This ease of use has a drawback: when sending a
message to a variable bounded to an object, the system does not check
the object understand the message. Nevertheless there is a procedure
to catch up this kind of situation.

@smalltalkExample{| msg |
msg := 'hello world!.
msg capitalized}

@subsection Fun with collections
Collection is the Smalltalk general term to design a set of
objects. Other languages name it array or list. There are different
kind of collection. We already discussed one particular collection:
@class{String} is a collection of characters.

@cindex array
@class{Array} is a fixed size collection, contrary to string it can
contain heterogeneous literal enclosed in @smalltalk{#(@tie{})}:
@smalltalkExample{"array of numbers"
#(1 3 5 7 11 1.1)
"array of mixed literals"
#(1 'friend' $& 'al')}

Using non literal expression in the array will not work as expected:
@smalltalkExample{#(1 2/3)
@result{} #(1 2 #/ 3)}

@cindex array, dynamic
Indeed, the ``/'' is interpreted as a literate, a symbol and
@smalltalk{2/3} is not executed as a fraction. To get a fraction
inserted in the array, you use a @dfn{run-time array} or @dfn{dynamic
array}, its elements are expressions separated by dot and surrounded
with @smalltalk{@{ @}}:

@smalltalkExample{@{1 . 2/3 . 7.5@}
@result{} #(1 2/3 7.5)}

@cindex array, operation
@cindex array, size
With an array filled with numbers you can request information and
arithmetic operations:
@smalltalkExample{#(1 2 3 4) size @result{} 4
#(1 2 3 4) + 10 @result{} #(11 12 13 14)
#(1 2 3 4) / 10 @result{} #(1/10 1/5 3/10 2/5)}

@cindex collection, @msg{squared}
Mathematics operations work as well:
@smalltalkExample{#(1 2 3 4) squared @result{} #(1 4 9 16)
#(0 30 45 60) degreeCos
@result{} #(1.0 0.8660254037844386
0.7071067811865475 0.49999999999999994)}

@cindex array, statistic
Basic statistic methods can be used directly on array of numbers:
@smalltalkExample{
#(7.5 3.5 8.9) mean @result{} 6.633333333333333 
#(7.5 3.5 8.9) range @result{} 5.4
#(7.5 3.5 8.9) min @result{} 3.5
#(7.5 3.5 8.9) max @result{} 8.9}

To get an array of natural numbers from 1 to 100, we use the keyword
message @msg{to:}

@smalltalkExample{(1 to: 100) asArray
@result{} #(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91
92 93 94 95 96 97 98 99 100)}

In this line of code, the message @msg{to:} is sent to @smalltalk{1}
with the argument @smalltalk{100}. It returns an interval object. The
message @msg{asArray} sent to the interval returns an array.

@exercise{Negative integer numbers,exeNegativeIntegers,@emph{Create an
array of integer numbers ranging from -80 to 50.}}

@c introduce ordered collection
@cindex collection, dynamic
@cindex collection, @class{OrderedCollection}
@cindex collection, @msg{add:}
The size of n array is fixed size, it can not grow. An
@class{OrderedCollection} is a dynamic, ordered collection, it grows
when adding element with the @msg{add:} message:
@smalltalkExampleCaption{Dynamic size collection,dynamicSize,
| fibo | 
fibo := OrderedCollection newFrom: #(1 1 2 3).
fibo add: 5;
   add: 8;
   add: 13;
   add: 21.
fibo
@result{} an OrderedCollection(1 1 2 3 5 8 13 21)}

@cindex collection, @msg{at:}
@cindex collection, @msg{last}
@cindex collection, @msg{atLast:}
Index access to the elements of a collection is done with a variety of
messages. The index naturally ranges from 1 to the collection size:
@smalltalkExample{fibo at:1 @result{} 1
fibo at: 6 @result{} 5
fibo last @result{} 21
fibo atLast: 2 @result{} 13
fibo at: fibo size @result{} 21}


@subsubheading Playing with enumerators
The collection comes with a set of helpful methods named
enumerators. They operate one each element of a collection.

@cindex collection, set operations (union, intersection, difference)
Set operations between two collections are computed with the
@msg{union:}, @msg{intersection:} and @msg{difference:} messages.
@smalltalkExampleCaption{Set operations,setOpe,
#(1 2 3 4 5) intersection: #(3 4 5 6 7)
@result{} #(3 4 5)
#(1 2 3 4 5) union: #(3 4 5 6 7)
@result{} a Set(5 4 3 2 7 1 6) 
#(1 2 3 4 5) difference: #(3 4 5 6 7)
@result{} #(1 2)}

@exercise{Hole in a set,holeSet,@emph{Construct the array of the
numbers 1@comma{}...@comma{}24@comma{}76@comma{}...@comma{}100.}}

Set operation works with any kind of content. We will discuss
comparing objects later.
@smalltalkExample{#(1 2 3 'e' 5) intersection: #(3.0 4 6 7 'e')
@result{} #(3 'e')}

@cindex collection, @msg{select:}
@cindex collection, enumerator mechanism
@cindex block
To select the prime numbers from 1 to 100, we use the @msg{select:}
enumerator. This message is sent to a collection, then it will select
each element of the collection returning true to a test condition:

@smalltalkExampleCaption{Select prime numbers between 1 and 100,prime100,
(1 to: 100) select: [:n | n isPrime]
@result{}  #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71
73 79 83 89 97)}

This example introduces the message @msg{select:} and block of code, a
primordial constituting element of the @cuis{} model. A block of code,
delimited by square brackets, is a piece of code for later
execution(s). Let's explain how this script is executed:

@itemize

 @item @smalltalk{(1 to: 100)} is evaluated as an interval

 @item the block of code @smalltalk{[:n | n isPrime]} is instantiated (created)

 @item the message @msg{select:} is sent to the interval with the
 block of code as argument

 @item for each integer of the interval, the block of code is executed
 with its parameter @smalltalk{n} set to the integer value. Then, each
 time @smalltalk{n isPrime} evaluates to true, the @smalltalk{n} value
 is added to a new collection answered when the @smalltalk{select:}
 method finished testing each element of the collection.

@end itemize

Enumerators are tremendously powerful to process collection without
the need of index.

@exercise{Odd integers,oddNumbers,@emph{Select the odd number between
-20 and 45.}}

You want to know the quantity of prime numbers under 100.  Just send
the message @msg{size} to the answered collection at
@ref{prime100}. The parenthesis are mandatory to ensure the @msg{size}
is sent last to the resulting collection:
@smalltalkExampleCaption{Number of prime numbers between 1 and
100,qtyPrime100, ( (1 to: 100) select: [:n | n isPrime] ) size
@result{} 25}

For more clarity, we use a variable named @smalltalk{primeNumbers} to
remembers about the prime numbers list we build:
@smalltalkExample{| primeNumbers |
primeNumbers := (1 to: 100) select: [:n | n isPrime].
primeNumbers size}

@exercise{Number of prime number between 101 and
200,qtyPrime200,@emph{Modify @ref{qtyPrime100} to calculate the number
of prime numbers between 101 and 200.}}

@exercise{Multiple of 7,multiples7,@emph{Build the list of the
multiples to 7 bellow 100}}

@exercise{Odd and non prime integers,oddNonPrime,@emph{Build a
collection of the odd integers in [1 ; 100] which are not prime.}}

@cindex collection, @msg{collect:}
A sister enumerator to @msg{select:} is @msg{collect:}. It returns a
new collection of the same size, with each element transformed by a
block of code. When searching perfect cubic roots, it is useful to
know about some cubes:

@smalltalkExampleCaption{Collect cubes,cubesCollect,
(1 to: 10) collect:[:n | n cubed]
@result{} #(1 8 27 64 125 216 343 512 729 1000)}

The collected elements can be of a different type. Bellow, a string is
enumerated and integers are collected:

@smalltalkExample{'Bonjour' collect: [:c | c asciiValue ]
@result{}  #(66 111 110 106 111 117 114)}

We can shift the ascii value, convert back to character then collect
in a new string. It is a simple cipher:
@smalltalkExampleCaption{Simple cipher,simpleCipher,
'Bonjour' collect: [:c | (c asciiValue + 1) asCharacter ]
@result{} 'Cpokpvs'}

@exercise{Cipher decode,decodeCipher,@emph{Write the script to decode
cipher 'Zpvs!bsf!cptt', it was encoded with @ref{simpleCipher}}}

@cindex Caesar cipher
The Caesar's cipher is based on shifting letter to the right in the
alphabet order.  The method is named after Julius Caesar, who used it
in his private correspondence with a shift of 3.

@exercise{Alphabet Caesar's cipher,alphabetCipher,@emph{Write a script
to collect the upper letters representing the Caesar's cipher. The
expected answers is} #($D $E $F $G $H $I $J $K $L $M $N $O $P $Q $R $S
$T $U $V $W $X $Y $Z $A $B $C)}

Once you get the alphabet cipher right, you can encode your first
message:
@exercise{Encode with Caesar's cipher,encodeCaesar,@emph{Encode the
phrase 'SMALLTALKEXPRESSION'.}}

And decode message:
@exercise{Decode with Caesar's cipher,decodeCaesar,@emph{Decode the
message 'DOHDMDFWDHVW'.}}

@subsubheading Fun with loops
Collection can be iterated with traditional loops: there is a whole
family of @emph{repeat}, @emph{while} and @emph{for} loops.

@cindex loop, for
@cindex for loop
A straight @emph{for} loop between to integer value is written with
the keyword message @msg{to:do:}, the last argument is a block of code
executed for each index:
@smalltalkExampleCaption{A @emph{for} loop,forLoop,
| sequence |
sequence := OrderedCollection new.
1 to: 10 do: [:k | sequence add: 1 / k].
sequence
@result{} an OrderedCollection(1 1/2 1/3 1/4 1/5 1/6 1/7 1/8 1/9 1/10)}

A collect writes more concisely, though:
@smalltalkExample{(1 to: 10) collect: [:k | 1/k]}

To step with a different value than 1, a third numeric argument is
inserted:
@smalltalkExample{1 to: 10 by: 0.5 do: [:k | sequence add: 1 / k]}

@cindex loop, repeat
@cindex repeat
@cindex Fibonacci sequence
A repeated loop without index or any collection is written with the
@msg{timesRepeat:} message:
@smalltalkExampleCaption{A @emph{repeat} loop, repeatLoop,
| fibo |
fibo := OrderedCollection newFrom: #(1 1).
10 timesRepeat: [
   fibo add: (fibo last + fibo atLast: 2)].
fibo
@result{} an OrderedCollection(1 1 2 3 5 8 13 21 34 55 89 144)}

The quotient of consecutive Fibonacci terms converge toward the golden
value:
@smalltalkExample{fibo pairsDo: [:i :j |
   Transcript show: (j / i ) asFloat ; cr]
@result{} 1.0
@result{} 1.5
@result{} 1.6
@result{} 1.6153846153846154
@result{} 1.6176470588235294
@result{} 1.6179775280898876}

@c A graph to show the progression of Qty of prime number 100 large interval integer 

@node Introduction to the system classes
@section Introduction to the system classes
@cuis{} is a pure object oriented language: all the entities as
integer, float, rational number, string, collection, block of code we
discovered in the previous section are objects.

@subsection Understanding Object Oriented Programming
But what is an object?  An object is an entity responding to two
criteria:

@itemize

   @item @strong{An internal state.} It is materialized by variable(s)
   known only by the object. A variable only visible within the object
   is called @dfn{private}. As a consequence, it is impossible -- if
   the object decides so -- to know the internal state of the object
   from another object.

   @item @strong{A behavior.} It is modeled by message(s) -- we
   already used this vocabulary -- sent to the object. When the object
   receives a message it understands, it executes the code of an
   internal method named as the message.

@end itemize
@cindex class
@cindex subclass
@cindex instance

Several entities sharing the same variables and messages understanding
are very likely to exist within @cuis{} -- think about the
numbers. Therefore, entities are created -- @dfn{instantiated} --
following a model, this model is called a @dfn{Class}.

A specific class declares the internal variables and the behavior by
implementing the methods. Let see how the @class{Fraction} class is
declared:

@smalltalkExample{Number subclass: #Fraction
   instanceVariableNames: 'numerator denominator'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Kernel-Numbers'}

As expected there are two variables -- named @dfn{instance variables}
-- to define the @smalltalk{numerator} and @smalltalk{denominator} of
a fraction. From this declaration, we observe there is a hierarchy in
the class definition: @class{Fraction} is a kind of
@class{Number}. This means a fraction inherits the internal state --
variables -- and behavior -- methods -- defined in the @class{Number}
class. @class{Fraction} is called a @dfn{subclass} of @class{Number}.

This aspect of object oriented programming is called
@dfn{inheritance}. In @cuis{}, each class inherits from one parent
class.

@c instance creation
@cindex instance, creation
@cindex class, class method
In the previous section, we already met fraction. Those fractions are
objects called @dfn{instance} of the class @class{Fraction}. To create
this instance we wrote @smalltalk{5 / 4}, the mechanism is based on
message sending and polymorphism. The number @smalltalk{5} is an
integer receiving the message @msg{/}, therefore looking at the method
@method{/} in the @class{Integer} class explains how is instantiated
the fraction. See part of this method:
@smalltalkExample{/ aNumber
"Refer to the comment in Number / "
| quoRem |
aNumber isInteger ifTrue:
../..
   ifFalse: [^ (Fraction numerator: self denominator: aNumber) reduced]].
../..}

From this source code, we learn that in some situation, the method
returns a fraction, reduced. We can expect that in some other
situation an integer is returned, for example @smalltalk{6 / 2}.

In the example, we observe the message @msg{numerator:denominator:} is
sent to the class @class{Fraction}, such a message refers to a
@dfn{class method} understood only by the @class{Fraction} class. It
is expected such a named method returns an instance of a
@class{Fraction}.

Try out in a workspace:
@smalltalkExample{Fraction numerator: 24 denominator: 21
@result{} 24/21}

Observe how the fraction is not reduced. Whereas it is, when
instantiated with the @msg{/} message:

@smalltalkExample{ 24 / 21
@result{} 8/7}

A class method is often used to create a new instance from a class. In
@ref{forLoop}, the message @msg{new} is sent to the class
@class{OrderedCollection} to create a new empty collection;
@method{new} is a class method.

In @ref{repeatLoop}, the @msg{newFrom:} message is sent to the class
@class{OrdredCollection} to create a new collection filled with
elements from the array given in argument; @method{newFrom:} is
another class method.

@c instance method
@cindex class, instance method
@cindex polymorphism
@cindex number, @msg{squared}
Now observe the hierarchy of the Number class:

@format
@class{Number}
   @class{Float}
      @class{BoxedFloat64}
      @class{SmallFloat64}
   @class{Fraction}
   @class{Integer}
      @class{LargePositiveInteger}
         @class{LargeNegativeInteger}
      @class{SmalltalkInteger}
@end format

@class{Float}, @class{Integer} and @class{Fraction} are direct
descendants of the @class{Number} class. We already learnt about the
@msg{squared} message sent to integer and fraction instances:

@smalltalkExample{16 squared @result{} 256
(2 / 3) squared @result{} 4/9}

As the @msg{squared} message is sent to @class{Integer} and
@class{Fraction} instances, the associated @method{squared} method is
called an @dfn{instance method}. This method is defined in both the
@class{Number} and @class{Fraction} classes.


Let's examine this method in @class{Number}:
@smalltalkExample{Number>>squared
"Answer the receiver multiplied by itself."
   ^self * self}

In an instance method source code, @smalltalk{self} refers to the
object itself, here it is the value of the number. The @smalltalk{^}
symbol indicates to return the following value @smalltalk{self *
self}.

Now let's examine this same method in @class{Fraction}:
@smalltalkExample{Fraction>>squared
   ^ Fraction
      numerator: numerator squared
      denominator: denominator squared}

Here a new fraction is instantiated with numerator and denominator
squared. This alternate @method{squared} method, ensure a fraction is
returned.

@cindex method, overriding
@cindex overriding
When message @msg{squared} is sent to a number, different methods are
executed depending on the number is a fraction or any other kind of
number. This fundamental mechanism of oriented object programming is
called @dfn{Polymorphism}. More precisely, the @class{Fraction} class
is @dfn{overriding} the @method{squared} method, defined above in the
class hierarchy.

@cindex number, @msg{abs}
Still in the @class{Number} hierarchy, let's examine another example
of polymorphism with the @msg{abs} message:

@smalltalkExample{-10 abs @result{} 10
5.3 abs @result{} 5.3
(-5 / 3) abs @result{} 5/3}

The implementation in @class{Number} does not need much
explanation. There is the @msg{ifTrue:ifFalse:} we have not yet
discussed so far, but the code is quite self-explanatory:

@smalltalkExample{Number>>abs
"Answer a Number that is the absolute value (positive magnitude) of the 
receiver."
   self < 0
      ifTrue: [^self negated]
      ifFalse: [^self]}

This implementation will do just fine for the @class{Number}
subclasses. Nevertheless, there are several classes overriding it for
optimization purpose.

For example, regarding large positive integer, @method{abs} is
empty. Indeed, in the absence of explicitly returned value, the
default returned value is the instance itself, in our situation the
@class{LargePositiveInteger} instance:

@smalltalkExample{LargePositiveInteger>>abs}

The @class{LargeNegativeInteger} counter part compute the opposite
with @msg{negated} message:

@smalltalkExample{LargeNegativeInteger>>abs
   ^ self negated}
   
These two overriding methods are more efficient as they avoid test and
ifTrue/ifFalse branches. Polymorphism is often used to avoid test and
branching, it is done at the object level.

To ease the exploration of the system classes, we will first introduce
the system browser, a central tool to @cuis{} oriented object
programming.

@cindex tools, system browser
@cindex browser
@subsection A brief introduction to the system browser
The @dfn{System Browser}, in short the @dfn{Browser}, is a tool to
rule all the classes in @cuis{}. It is both a tool to explore the
classes (system or user ones) and to write new classes and methods.

To access the tool, ...@clicksequence{Background click @click{}
Open... @click{} Browser}...

@figure{The System Browser,B-01-browserDetailed,12}

@cindex browser, class category
At the top left are the @dfn{class categories}, there are group of
classes part of the same theme. It is also called @dfn{Package}, it is
an organisational element to save code. In @ref{B-01-browserDetailed}, the
selected class category is @option{Kernel-Numbers}, a group of
classes we already explored. The term @option{Kernel-} indicates it
is part of fundamental categories, but it is only a convention. See
the other categories as @option{Kernel-Text} and
@option{Kernel-Chronology} related to text and date entities.

@cindex class, declaration
Next to the right are the classes in the selected class category. They
are nicely presented in a parent-child class hierarchy. When a class is
first selected in this pane, its declaration appears in the large pane
bellow, the @class{Number} class declaration is:

@smalltalkExample{Magnitude subclass: #Number
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Kernel-Numbers'}

Observe a few important points in this declaration:

@itemize

   @item @class{Number} is a sub class of @class{Magnitude}

   @item the declaration itself is Smalltalk code, indeed the message
   @msg{subclass:instanceVariableNames:classVariableNames:poolDictionaries:
   category:} is sent to @class{Magnitude}

   @item the @smalltalk{subclass:} argument @class{Number} is prefixed
   with ``#'', it is a symbol, a kind of unique string. Indeed when
   declaring the @class{Number} class, the system does not know it
   yet, so it is named as a symbol.

   @item The @smalltalk{instanceVariableNames:} argument is a string:
   the instance variables of the class are declared by name separated
   by a space.

@end itemize

Next to the right is the method categories panel. It is user defined
method categories. A class can come with tenth of methods, grouping
them by category ease the user access. As a reference, @class{Number}
has more than 100 instance side methods implemented in
itself@footnote{When considering its parents, the count is greater
than 300.}; therefore clicking the @option{arithmetic} category
directly gives access to related methods in the next and last pane at
the right.

@exercise{Count of methods,stringArith,@emph{How many methods is there
in the @option{arithmetic} method category of the @class{String}
class?}}

@c explain mini panel | instance | ? | class |
In @ref{B-01-browserDetailed}, bellow the classes pane, there are three
buttons:

@itemize

   @item @option{instance}: to access the @strong{instance methods} of
   the selected class. For the recall, these methods are only
   accessible from the instances of the class.

   @item @option{?}: to access to documentation -- comment -- of the
   selected class.

   @item @option{class}: to access the @strong{class methods} of the
   selected class. These methods are only accessible from the class
   itself.

@end itemize

Bellow this three buttons, observe the wide text pane, it provides
contextual information on the selected item.

@exercise{Float class information, floatInfo, @emph{When the
@class{Float} class is selected, what is the information provided by
the text pane?}}

It is important to distinguish instance methods and class
methods. Let's consider the @class{Float} class as an example.

@cindex class, class method
@strong{Class Methods.} In @ref{B-01-floatClassSide} the methods listed are
class side, in the browser the @option{class} is pressed to see this
list. From a Workspace, this methods are called with the message name
sent directly to the class:

@smalltalkExample{Float e
@result{} 2.718281828459045
Float epsilon
@result{} 2.220446049250313e-16
Float fmax
@result{} 1.7976931348623157e308}

Nevertheless, you can not send this message to instance of
@class{Float}, it throws an error and open the red debugger window:

@smalltalkExample{
3.14 pi
@result{} MessageNotUnderstood: SmallFloat64>>pi
Float pi e
@result{} MessageNotUnderstood: SmallFloat64>>e}

Often these class methods are used to access constant value as seen in
the previous example or to create a new instances:

@smalltalkExample{
OrderedCollection new
@result{} Create a new empty ordered collection
Fraction numerator: 1 denominator: 3
@result{} 1/3 a fraction instance
Float new
@result{} 0.0
Float readFrom: '001.200'
@result{} 1.2 
Integer primesUpTo: 20
@result{} #(2 3 5 7 11 13 17 19) }

@figure{Class methods in @class{Float},B-01-floatClassSide,5}

@cindex class, instance method
@strong{Instance methods.} In @ref{B-01-floatInstanceSide}, the methods
listed are instance side, in the browser the @option{instance} button
is pressed to see this list. In a Workspace, this methods are called
with the message name sent directly to an instance:

@smalltalkExample{
-10.12 abs @result{} 10.12
3.14 cos @result{} -0.9999987317275395
-10.12 * 2 @result{} -20.24}

Instance method message can not be sent directly to a class, you need
to instantiate first an object:

@smalltalkExample{
Float cos
@result{} MessageNotUnderstood: Float class>>cos
Fraction squared
@result{} MessageNotUnderstood: Fraction class>>squared
OrderedCollection add: 10
@result{} MessageNotUnderstood: OrderedCollection class>>add:}

Of course you can mix both class and instance methods, as long as you
send the message to the appropriate class or instance:

@smalltalkExample{Float pi cos
@result{} -1.0
Float e ln
@result{} 1.0 
(Fraction numerator: 4 denominator: 5) squared
@result{} 16/25
OrderedCollection new add: Float pi; add: Float e; yourself
@result{} an OrderedCollection(3.141592653589793 2.718281828459045) 
}

@figure{Instance methods in @class{Float},B-01-floatInstanceSide,7}

With this brief introduction to the system browser, your are now
equipped to explore the system classes.

@subsection @cuis{} system classes
As we already wrote @cuis{} is a pure object oriented environment. It
means that every single entities you are dealing with are represented
as instances of classes written in @cuis{} itself. As a direct
consequence, @cuis{} is mostly written in itself.  In the previous
section we read some details of the @class{Fraction} class and both
instance and class side methods (@method{abs}, @method{squared} and
@method{numerator:denominator:}.

What we call system classes are models of fundamental objects. In
other programming languages, it will be called standard library.

To be honest, there is no such a distinction between system classes
and user classes, but it will help us to draw a boundary around the
most used objects. We will give a brief introduction to these classes
and the most important methods, part two gives a more detailed
presentation.

The classes are organised in hierarchy grouped in categories. To
discover the most important classes, we use the browser to navigate
these categories in the left pane. Important categories to start with
are:


@itemize

   @item @option{Kernel-Numbers}. Related to the different number
   representations and calculus, including mathematics functions,
   conversion, intervals and even iterations.
   
   @item @option{Kernel-Text}. Related to character and string as
   collection of characters.
   
   @item @option{Collections-Abstract},
   @option{Collections-Unordered}, @option{Collections-Sequenceable},
   @option{Collections-Arrayed}. Related to Array, Dictionary, dynamic
   collection as OrderedCollection and many more. It includes
   accessing, enumerators, mathematics functions, sorting.

@end itemize


@strong{Kernel-Numbers.} The top hierarchy @class{Number} class shows
most of the behaviors inherited by the sub classes as @class{Float},
@class{Integer} and @class{Fraction}. The Smalltalk way to learn about
a behavior is to point the System Browser toward a top hierarchy class
and to explore the method categories.

Let's suppose we want to round a float number. In @class{Number}, we
explore the @option{Truncation and round off} method category to
discover several behaviors. The next things to do, is to test these
messages in a Workspace to discover the one we are searching for:

@smalltalkExampleCaption{Rounding numbers@comma{} Workspace try out, roundingNumbers,
1.264 roundTo: 0.1 @result{} 1.3 
1.264 roundTo: 0.01 @result{} 1.26 
1.264 roundUpTo: 0.01 @result{} 1.27
1.264 roundTo: 0.001 @result{} 1.264}


@cindex loop, for
@cindex for loop
Number is a very strange place to look for an indexed loop in a given
interval. Nevertheless, an interval is defined by start and stop
numbers. In the @class{Number} class, the method category
@option{intervals} reveals related behaviors, we already met some of
them. These methods works indifferently with all kind of number:

@smalltalkExampleCaption{Interval loops (for-loop), intervalLoops,
1 to: 10 do: [:i | Transcript show: 1 / i; space]
@result{} 1 (1/2) (1/3) (1/4) (1/5) (1/6) (1/7) (1/8) (1/9) (1/10)

1 to: 10 by: 2 do: [:i | Transcript show: 1 / i; space]
@result{} 1 (1/3) (1/5) (1/7) (1/9)

1/10 to: 5/3 by: 1/2 do: [:i | Transcript show: i; space]
@result{} (1/10) (3/5) (11/10) (8/5) (1/10) (3/5) (11/10) (8/5) 

Float pi to: 5 by: 1/3 do: [:i | Transcript show: (i roundTo: 0.01) ; space]
@result{} 3.14 3.47 3.81 4.14 4.47 4.81}

@cindex loop, repeat
@cindex repeat
Now, in the @class{Integer} class, explore the method category
@option{enumerating}, here is the @method{timesRepeat:}. When a
portion of code needs to be executed several times
@footnote{Understand repeated an integer number of times.}, without
the need of an index, the @msg{timesRepeat:} message is sent to an
integer. We already saw this variant in a previous section of this
chapter.  Throwing 5 times a 6 faces dice can be simulated with
integer:

@smalltalkExampleCaption{Throwing a dice 5 times, playingDice,
5 timesRepeat: [Transcript show: 6 atRandom; space]
@result{} 1 2 4 6 2}

@exercise{Cosine table,cosTable, @emph{Compute the cosine values in
the interval [0 ; 2PI]@comma{} each 1/10. Output in the transcript.}}

@c Integer bits representation and manpulation
Integer number can be represented and converted in different base:


@strong{Kernel-Text.}  Notably, this category comes with
@class{Character}, @class{String} and @class{Symbol}. @class{String}
instance are collection of @class{Character} instances.

An individual character is written prefixed with a ``$'':
@smalltalk{$A}. It can be defined with the class side method
@method{numericValue:} or converted from an integer instance with the
@msg{asCharacter}:

@smalltalkExample{
Character numericValue: 65 @result{} $A
65 asCharacter @result{} $A}

There are class side methods for non printable characters:
@smalltalk{Character tab}, @smalltalk{Character lf}, etc.

As string are collection of characters, when enumerating a string we
can use the @class{Character} instance methods:

@smalltalkExampleCaption{Twelve apples,apples12,
'There are 12 apples.' select: [:i |i isDigit].
@result{} '12'}

@exercise{Select apples,selectApples, @emph{Modify @ref{apples12} to
reject the numeric characters.}}


@strong{Collections.}


