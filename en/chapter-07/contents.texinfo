@node The Fundamentals of Morph
@chapter The Fundamentals of Morph

@quotation
Simple things should be simple and complex things should be possible.
@author Alan Kay
@end quotation

@* @* @* @*



What would we expect if we asked for good support for building GUIs in a
programming system?

In @ref{Visual with Morph} we started with that same question, and
gave an overview of Morphs and their interactive behavior. This
chapter deals with how Morphs are built, how to create new Morphs and
what rules they follow.

@cindex moprh @subentry legacy
The User Interface framework in @cuis{} is called Morphic. Morphic was
originally created by Randy Smith and John Maloney as the
@url{https://bibliography.selflanguage.org/_static/self4.0UserInterface.pdf,,UI
for Self}. Later, John Maloney ported it to Smalltalk, to be used as
the
@url{http://stephane.ducasse.free.fr/FreeBooks/CollectiveNBlueBook/morphic.final.pdf,,UI
for Squeak}.


@menu
* Going Vector::
* A Clock Morph::
* Back to Spacewar! Morphs::
@end menu


@node Going Vector
@section Going Vector

For @cuis{}, we built Morphic 3, the third design iteration of these
ideas, after Self's Morphic 1 and Squeak's Morphic 2. If you already
know Morphic in Self or Squeak, most concepts are similar, although
with some improvements: Morphic 3 coordinates are not limited to being
integer numbers, the apparent size (zoom level) of elements is not
tied to pixel density, and all drawing is done with high quality
(subpixel) anti aliasing. These enhancements are enabled by the huge
advance in hardware resources since Self and Squeak were designed (in
the late 80's and late 90's respectively). Additionally, careful
design of the framework relieves Morph programmers from much the
complexity that was required, especially with regards to geometry.

This step is required until VectorGraphics becomes part of the base
@cuis{} image:

@cindex morph @subentry vector @subentry installation
@smalltalkExample{Feature require: 'VectorGraphics'}
@smalltalkExample{TrueTypeFontFamily read: DirectoryEntry smalltalkImageDirectory
   / 'TrueTypeFonts' / 'DejaVu'/ 'DejaVuSans'}

@subsection A first example

Let's start with some examples. What we want is to build our own
graphic objects, or Morphs. A Morph class is part of the Morph
hierarchy and usually includes a @method{drawOn:} method for drawing
its distinctive appearance. If we forget about computers for a second,
and consider drawing with color pens on a sheet of paper, one of the
most basic things we can do is to draw straight lines.

So, let's start a System Browser window and build a straight line
object:

@smalltalkExample{Morph subclass: #LineExampleMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'}

In method category @label{drawing} add:

@cindex morph @subentry vector @subentry line drawing
@cindex morph @subentry @method{drawOn:}
@smalltalkExample{LineExampleMorph>>drawOn: aCanvas
   aCanvas strokeWidth: 20 color: Color green do: [
      aCanvas
         moveTo: 100 @@ 100;
         lineTo: 400 @@ 200 ].}

Now in a Workspace execute:
@smalltalkExample{LineExampleMorph new openInWorld}

If you get a prompter asking whether to install and activate Vector
Graphics support, please answer yes. There it is. You have already
built your first @class{Morph} class.

@figure{Details of our line morph,ch07-01-LineDetails,10}

The code is self evident, the @method{drawOn:} method takes a
@class{VectorCanvas} instance as an argument. @class{VectorCanvas}
provides many drawing operations for morphs to use. You can play with
the various drawing operations and their parameters, and see the
result. If you make a mistake, and the @method{drawOn:} method fails,
you'll get a red and yellow error box. After fixing your
@method{drawOn:} method, do ...@clicksequence{World menu @click{}
@label{Debug...} @click{} @label{Start drawing all again}}.. to get
your morph redrawn correctly.

@exercise{Cross morph, exeCrossMorph,@emph{How will you modify our
line morph so it draws itself as a cross with an extent of 200
pixels?}}


@subsection Morph you can move
@cindex morph @subentry movable
You might have already tried to click and drag on your Line, like you
can do with regular windows and most other Morphs. If not, try
now. But nothing happens! The reason is that our Morph is fixed in a
place in the owner morph (the WorldMorph). It is fixed because
@method{drawOn:} says it should be a line between @smalltalk{100 @@ 100}
and @smalltalk{400 @@ 200}. Moving it around would mean modifying those
points. One possible way to do that could be to store those points in instance
variables.

But now, we just want to code our morph in the simplest possible way,
and still be able to move it around. The solution is to make it
subclass of @class{PlacedMorph}, instead of @class{Morph}.

@cindex morph @subentry @method{delete}
To do this, first evaluate the code below to get rid of all LineExampleMorph instances:

@smalltalkExampleCaption{Delete all instances of a given morph,deleteMorphInstances,
LineExampleMorph allInstancesDo: [ :m | m delete]}

Then, in the System Browser class declaration for LineExampleMorph, type
@class{PlacedMorph} instead of @class{Morph} and save. Now execute
again:

@smalltalkExample{LineExampleMorph new openInWorld}

@cindex morph @subentry @smalltalk{location}
You will get a line you can grab with the mouse and move it
around. @class{PlacedMorph} adds a new instance variable called
@smalltalk{location}. If a morph has a @smalltalk{location}, it can be
moved around, by modifying it. The @smalltalk{location} also defines a
new local coordinate system. All the coordinates used in the
@method{drawOn:} method are now relative to this new coordinate
system. That's why we don't need to modify the @method{drawOn:}
method. @method{drawOn:} now tells how the morph should be drawn, but
not where. The @smalltalk{location} also specifies a possible rotation
and scale factor. This means that subinstances of @class{PlacedMorph}
can also be rotated and zoomed.


@subsection Filled morph
Let's build another morph, to have more fun.

@smalltalkExample{PlacedMorph subclass: #TriangleExampleMorph
   instanceVariableNames: 'borderColor fillColor'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'}

In method category @label{initialization} add:

@smalltalkExample{TriangleExampleMorph>>initialize
   super initialize.
   borderColor @assign{} Color random alpha: 0.8.
   fillColor @assign{} Color random alpha: 0.6.}

In the @label{drawing} method category add:

@cindex morph @subentry vector @subentry filling area
@cindex morph @subentry @method{drawOn:}
@smalltalkExample{TriangleExampleMorph>>drawOn: aCanvas
   aCanvas strokeWidth: 10 color: borderColor fillColor: fillColor do: [
      aCanvas
         moveTo: 0 @@ 100;
         lineTo: 87 @@ -50;
         lineTo: -87 @@ -50;
         lineTo: 0 @@ 100 ].}

Take a moment to understand that code, to guess what it will do. Now
execute:

@smalltalkExample{TriangleExampleMorph new openInWorld}

Do it several times, and move each triangle around. Each new triangle
you create has different colors. And these colors are not completely
opaque. This means that when you place your triangle over some other
morph, you can see through it.

@figure{A variety of triangle morphs@comma{} one decorated with its halo and coordinates system,ch07-02-Triangles,6} 


@exercise{Rectangle morph, exeRectMorph, @emph{How will you write a
movable rectangle morph with an x,y extent of 200 by 100? The rect will
be filled with a random translucent color and surrounded by a thin
blue line.}}

As we learnt previously, Morphic gives you additional ways to interact
with your morphs. With a three button mouse or a wheel mouse, place
the mouse pointer (a @class{HandMorph} instance) over one of your
triangles and click with the center button or mouse wheel. If you don't have
a three button mouse substitute @kbd{Command-click}. You get a constellation
of small colored circles around your morph. This is called the morph's
@dfn{halo}, and each colored circle is a @dfn{halo
handle}. @xref{ch07-02-Triangles}.

At the top left you have the red @label{Remove} handle. Clicking on it
just removes the morph from the morphic world. Hover your hand over
each handle, and you'll get a tooltip with its name. Other handles let
you @label{Duplicate} a morph, open a @label{Menu} with actions on it,
@label{Pick up} (same as dragging it with the the mouse as you did
before). The @label{Move} operation is similar to @label{Pick up}, but
doesn't remove the morph from the current owner. More about that,
later. The @label{Debug} handle opens a menu from where you can open
an Inspector or a Hierarchy Browser to study the morph.

You also have a @label{Rotate} and @label{Change scale} handles. Try
them! To use them, move your hand to the handle, and then press the
mouse button and drag it. As you might have guessed, the rotate
handles spins your morph around its @smalltalk{0 @@ 0} coordinates
(i.e. the origin of its own coordinate system). The scale handles
controls the apparent zoom applied to your morph. Both scale and
rotation (and also displacement, as when you move your morph around)
are implemented by modifying the inner coordinate system defined by
your morph. Displacement, rotation and scale are floating point
numbers, and thus not limited to integers.

We will learn how to control all this with code and animate our morph.

@exercise{Rotate your rectangle morph arround its center,exeRotateRect,
@emph{Rotate your rectangle morph. Does it rotate around its center or
around one corner? If necessary rewrite your rectangle morph so it rotates
around its center.}}

In the solution we gave for the @ref{exeCrossMorph} (@ref{Solutions to
the Exercises}), the cross origin is set to its top left. Therefore it
rotates around this point.

@exercise{Rotate the cross around its center,exeCrossCenterMorph,
@emph{How will you rewrite the @method{drawOn:} so it rotates around
its center?}}

@subsection Animated morph
@cindex morph @subentry animated
Let's add two methods to our @class{TriangleExampleMorph} to
make our triangle @emph{alive}:

@cindex morph @subentry @method{step,wantsSteps}
In the method category @label{stepping} define:
@smalltalkExample{TriangleExampleMorph>>wantsSteps
   @return{} true}

...and:
@smalltalkExample{TriangleExampleMorph>>step
   fillColor @assign{} Color random.
   self redrawNeeded}

Then create some additional triangles as you did before.

This will make our triangles change color once a second. But more
interesting, edit the method:

@smalltalkExample{TriangleExampleMorph>>stepTime
   @return{} 100}

...and:

@cindex morph @subentry @method{morphPosition}

@smalltalkExample{TriangleExampleMorph>>step
   self morphPosition: self morphPosition + (0.4@@0).
   self redrawNeeded}

Now, our morph steps ten times per second, and moves to the right at a
speed of four pixels per second. At each step it moves by 0.4 pixels,
and not by an integer number of pixels. High quality anti-aliasing
drawing means we can actually do that! You can make it step at a speed
of four times a second, and move 1 pixel each time, and see how different
that looks.

Now try this:

@cindex morph @subentry @method{rotateBy:}

@smalltalkExample{TriangleExampleMorph>>step
   self morphPosition: self morphPosition + (0.2@@0).
   self rotateBy: 4 degreesToRadians.
   self redrawNeeded}

It gets even better. First get rid of all instances:
 
@smalltalkExample{TriangleExampleMorph allInstancesDo: [ :m | m delete]}

And modify these methods:

@smalltalkExample{TriangleExampleMorph>>initialize
   super initialize.
   borderColor @assign{} Color random alpha: 0.8.
   fillColor @assign{} Color random alpha: 0.6.
   scaleBy @assign{} 1.1}

Accept @smalltalk{scaleBy} as a new instance variable of the
@class{TriangleExampleMorph} class.

@smalltalkExample{TriangleExampleMorph>>step
   self morphPosition: self morphPosition + (0.2@@0).
   self rotateBy: 4 degreesToRadians.
   self scaleBy: scaleBy.
   self scale > 1.2 ifTrue: [scaleBy @assign{} 0.9].
   self scale < 0.2 ifTrue: [scaleBy @assign{} 1.1].
   self redrawNeeded}

Then create a new triangle:
@smalltalkExample{TriangleExampleMorph new openInWorld}

See that when the triangle is doing its crazy dance, you can still
open a halo and interact with it.

@iftex
   @figure{Animated morph,ch07-03-AnimatedMorph,10}
@end iftex

@ifhtml
   @figureExt{Animated morph,ch07-03-AnimatedMorph,10,.gif}
@end ifhtml


@subsection Morph in morph
@cindex morph @subentry submorph

Now, let's try something different. Grab one of your
@class{LineExampleMorph}. With the halo, zoom it until it is about the
size of your triangle. Now place the triangle above your line. Open a
halo on the triangle, click on the @label{Menu} handle and select
...@clicksequence{@label{embed into} @click{}
@label{LineExampleMorph}}. This makes the triangle a submorph of the
line. Now, if you move, scale or rotate the line, the triangle also
gets adjusted.

You can open a halo on the triangle. To do this, middle-click twice
over it. With the halo on the triangle, you can rotate or zoom it
independently of the line. Also note that when you grab the triangle
with your hand (not using the halo), you grab the
line@tie{}+@tie{}triangle composite. You can't just drag the triangle
away. For this, you need the triangle's halo. Use its @label{Move}
handle@footnote{By now, it is likely that the triangle has walked quite
a bit!} to position it without @emph{getting it out} of the line. Use
its @label{Pick up} handle to take it with the hand and drop
it in the world. Now, the triangle is no a longer submorph of the line,
and the morphs can be moved, rotated or scaled independently.

But let's try something. Make the triangle submorph of the line
again. Now add the following method to category @label{geometry
testing} of the class @class{LineExampleMorph}:

@cindex morph @subentry @method{clipsSubmorphs}

@smalltalkExample{LineExampleMorph>>clipsSubmorphs
   @return{} true}

The drawing of the triangle gets cut exactly at the bounds of the
line. This is most useful for implementing scrolling panes that only
make a part of their contents visible, but might have other uses too.

@figure{An animated and clipped submorph
triangle,ch07-04-AnimatedAndClippedSubmorph,6}


@node A Clock Morph
@section A Clock Morph
With all the things we have already learned, we can build a more
sophisticated morph. Let's build a @class{ClockMorph} as see in
@ref{ch07-05-Clock}. In order to have a default text font based on
vector graphics, do ...@clicksequence{World menu @click{}
@label{Preferences...} @click{} @label{Set System Font...} @click{}
@label{DejaVu...} @click{} @label{DejaVuSans}}@footnote{You can select
any other TrueType font from the ones available.}.


@figure{A clock morph,ch07-05-Clock,4}

Let's create @class{ClockMorph}, the dial clock :

@smalltalkExample{PlacedMorph subclass: #ClockMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'}

@cindex morph @subentry @method{drawOn:}
...and its drawing method in the category @label{drawing}:

@smalltalkExampleCaption{Drawing the clock dial, clockDialDrawing,
ClockMorph>>drawOn: aCanvas
   aCanvas
      ellipseCenterX: 0 y: 0 rx: 100 ry: 100
      borderWidth: 10
      borderColor: Color lightCyan
      fillColor: Color veryVeryLightGray.
   aCanvas drawString: 'XII' at: -13 @@ -90 font: nil color: Color brown.
   aCanvas drawString: 'III' at: 66 @@ -10 font: nil color: Color brown.
   aCanvas drawString: 'VI' at: -11 @@ 70 font: nil color: Color brown.
   aCanvas drawString: 'IX' at: -90 @@ -10 font: nil color: Color brown}


We create @class{ClockHourHandMorph}, the hand for the hours:

@smalltalkExample{PlacedMorph subclass: #ClockHourHandMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'}

...and its drawing method in the category @label{drawing}:

@smalltalkExample{ClockHourHandMorph>>drawOn: aCanvas
   aCanvas fillColor: (Color black alpha: 0.6) do: [
      aCanvas
         moveTo: 0 @@ 10;
         lineTo: -5 @@ 0;
         lineTo: 0 @@ -50;
         lineTo: 5 @@ 0;
         lineTo: 0 @@ 10 ].}

You can start playing with them. We could use several instances of a
single @class{ClockHandMorph}, or create several classes. Here we
chose to do the latter. Note that all the @method{drawOn:} methods use
hardcoded constants for all coordinates. As we have seen before, this
is not a limitation. We don't need to write a lot of specialized trigonometric and
scaling formulas to build Morphs in @cuis{}!

By now, you might imagine what we are doing with all this, but please
bear with us while we finish building our clock.

We create @class{ClockMinuteHandMorph}, the hand for the minutes:

@smalltalkExample{PlacedMorph subclass: #ClockMinuteHandMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'}

...and its drawing method in the category @label{drawing}:

@smalltalkExample{ClockMinuteHandMorph>>drawOn: aCanvas
   aCanvas fillColor: ((Color black) alpha: 0.6) do: [
      aCanvas
         moveTo: 0 @@ 8;
         lineTo: -4 @@ 0;
         lineTo: 0 @@ -82;
         lineTo: 4 @@ 0;
         lineTo: 0 @@ 8 ]}

And finally, the @class{ClockSecondHandMorph}, the hand for the seconds:

@smalltalkExample{PlacedMorph subclass: #ClockSecondHandMorph
   instanceVariableNames: ''
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Morphic-Learning'}

...and its drawing method in the category @label{drawing}:

@smalltalkExample{ClockSecondHandMorph>>drawOn: aCanvas
   aCanvas strokeWidth: 2.5 color: Color red do: [
      aCanvas
         moveTo: 0 @@ 0;
         lineTo: 0 @@ -85 ]}

Now, all that is needed is to put our clock parts together in
@class{ClockMorph}. In its method category @label{initialization} add
its @method{initialize} method (accept the new names as instance
variables):

@smalltalkExample{ClockMorph>>initialize
   super initialize.
   self addMorph: (hourHand @assign{} ClockHourHandMorph new).
   self addMorph: (minuteHand @assign{} ClockMinuteHandMorph new).
   self addMorph: (secondHand @assign{} ClockSecondHandMorph new)}

@cuisNote{If you have not already added instance variables for the
clock hands, the Cuis IDE will note this and ask what you want
to do about it.  We want to declare the three missing names as instance
variables.}

@figure{Declaring unknown variables as instance variables in current class,ch07-07-ClockMorph-initialize,8}

Your @class{ClockMorph} class definition should now be complete!

@figure{@class{ClockMorph} with instance variables added,ch07-08-ClockMorph-ivars-added,8}

Finally, we animate our clock. In method category @label{stepping} add the
method:

@smalltalkExample{ClockMorph>>wantsSteps
   @return{} true}

...and:

@smalltalkExample{ClockMorph>>step
   | time |
   time @assign{} Time now.
   hourHand rotationDegrees: time hour * 30.
   minuteHand rotationDegrees: time minute * 6.
   secondHand rotationDegrees: time second * 6}

Take a look at how we update the clock hands.

As we said before, any @class{PlacedMorph} defines a coordinate
system for its own @method{drawOn:} method and also for its
submorphs. This new coordinate system might include rotation or
reflexion of the axis, and scaling of sizes, but by default they
don't. This means that they just translate the origin, by specifying
where in the owner point @smalltalk{0 @@ 0} is to be located.

The World coordinate system has @smalltalk{0 @@ 0} at the top left
corner, with X coordinates increasing to the right, and Y coordinates
increasing downwards. Positive rotations go clockwise. This is the
usual convention in graphics frameworks. Note that this is different
from the usual mathematics convention, where Y increases upwards, and
positive angles go counterclockwise.

So, how do we update the hands? For example, for the hour hand, one
hour means 30 degrees, as 12 hours means 360 degrees or a whole
turn. So, we multiply hours by 30 to get degrees. Minute and second hand
work in a similar way, but as there are 60 minutes in one hour, and 60
seconds in one minute, we need to multiply them by 6 to get degrees. As
rotation is done around the origin, and the clock has set the origin at its
center (@ref{clockDialDrawing}), there's no need to set the position of the
hands. Their @smalltalk{0 @@ 0} origin will therefore be at the clock
@smalltalk{0 @@ 0}, i.e. the center of the clock.

@figure{A fancy clock morph,ch07-06-ExerciseClock,4}

@exercise{A fancy clock, exeFancyClock, @emph{Look at the clock on
@ref{ch07-06-ExerciseClock}. Don't you think its hand for the seconds
decorated with a red and yellow disc is fancy? How will you modify our
clock morph to get this result?}}

Create some instances of your clock: @smalltalk{ClockMorph new
openInWorld}. You can rotate and zoom. Look at the visual quality of
the Roman numerals in the clock face, especially when rotated and
zoomed. You don't get this graphics quality on your regular
programming environment! You can also extract the parts, or scale each
separately. Another fun experiment is to extract the Roman numerals
into a separate @class{ClockFaceMorph}, and make it submorph of the
Clock. Then, you can rotate just the face, not the clock, and the
clock will show fake time. Try it!

You might have noted two things that seem missing, though: How to
compute bounding rectangles for Morphs, and how to detect if a Morph
is being hit by the Hand, so you can move it or get a halo. The
display rectangle that fully contains a morph is required by the framework
to manage the required refresh of Display areas as a result of
any change. But you don't need to know this rectangle in order to
build your own Morphs. In @cuis{}, the framework computes it as
needed, and stores it in the @smalltalk{privateDisplayBounds}
variable. You don't need to worry about that variable at
all.

With respect to detecting if a Morph is being touched by the Hand,
or more generally, if some pixel belongs to a Morph, truth is that during
the drawing operation of a Morph, the framework indeed knows all the
pixels it is affecting. The @method{drawOn:} method completely specifies
the shape of the Morph. Therefore, there is no need to ask the programmer
to code the Morph geometry again in a separate method! All that is needed
is careful design of the framework itself, to avoid requiring programmers to
handle this extra complexity.

The ideas we have outlined in this chapter are the fundamental ones in
Morphic, and the framework is implemented in order to support
them. Morphs (i.e. interactive graphic objects) are very general and
flexible. They are not restricted to a conventional widget library,
although such a library (rooted in @class{BoxedMorph}) is included
and used for building all the Smalltalk tools.

The examples we have explored use the @label{VectorGraphics}
package. This package includes @class{VectorCanvas} and
@class{HybridCanvas} classes. However, installing this package is not
required for using the regular Smalltalk tools you have been
using. The reason is that @cuis{} includes by default the
@class{BitBltCanvas} class inherited from Squeak (and called
@class{FormCanvas} there). @class{BitBltCanvas} doesn't support the
vector graphics drawing operations and doesn't do anti-aliasing or
zooming. But it is mature, and it relies on the BitBlt operation that
is included in the @vm{}. This means that it offers excellent
performance.

@label{VectorGraphics} is still in active development. When its drawing
performance becomes good enough, it will be able to draw all Morphs,
completely replacing BitBltCanvas. Then, the UI customization option
@clicksequence{World menu @click{} @label{Preferences...} @click{}
@label{Font Sizes...}} will no longer be needed, as all windows will be
zoomable, in addition to resizable.

To further explore @cuis{}' Morphic, evaluate @smalltalk{Feature
require: 'SVG'}, and then @smalltalk{SVGElementMorph examplesLion} and
the other examples there. Also, be sure to try the example in the
comment in the @method{BitBltCanvas class>>unicodeExamples} and
@method{BitBltCanvas class>>unicodeUtf32Examples} methods.

Before we leave this section, here is a two lines change to turn our
Cuis quartz clock@footnote{In a quartz clock, the hand for the seconds
moves every second.} to an automatic Swiss clock@footnote{In an
automatic clock, the hand for the seconds moves every fraction of a
second. The smaller the fraction, the more premium the clock is.}:

@smalltalkExample{ClockMorph>>stepTime
    ^ 100 "milliseconds"
ClockMorph>>step
../..
   secondHand rotationDegrees: (time second + (time nanoSecond * 1.0e-9))* 6}

Try to understand how these changes affect the behavior of the
seconds' hand and at which fraction of a second it is rotating.

@node Back to Spacewar! Morphs
@section Back to Spacewar! Morphs
For performance reasons, our Spacewar! game does not use the
@label{VectorGraphics} package. It relies on the BitBlt
canvas. Therefore, each of our moprh should answer @smalltalk{false}
to the @msg{requiresVectorCanvas} message:

@smalltalkExampleCaption{We don't use @label{VectorGraphics} for performance reason, vectorGraphicsNo,
Mobile>>requiresVectorCanvas
   @return{} false

CentralStar>>>requiresVectorCanvas
   @return{} false

SpaceWar>>>requiresVectorCanvas
   @return{} false}

By inheritance, @class{Mobile} being a superclass of @class{SpaceShip} and
@class{Torpedo} means that instances of these later classes also respond
@smalltalk{false} to the @msg{requiresVectorCanvas} message.

@subsection Central star
Because we use the bitmap canvas for the rendering of our morphs, each
morph should knows about its extent. That way the collision detection
between star, ships and torpedoes works properly.

When one of our morphs receives the @msg{morphExtent}
message, it answers its extent in its idle position when not
rotated.

@cindex backtick
Our central has an extent of @smalltalk{30 @@ 30}:

@smalltalkExampleCaption{Central star extent, centralStarExtent,
CentralStar>>morphExtent
   @return{} `30 @@ 30`}

@cuisNote{An expression surrounded with backticks @code{'`'}
is evaluated only once,
when the method is first saved and compiled.
This creates a compound literal value and 
improves the performance of the method since the expression is not evaluated
each time the method is called: the pre-built value is used instead.}

@cindex number @subentry integer @subentry @method{atRandom}
@cindex morph @subentry @method{drawOn:}

As you learnt previously, a morph draws itself from its
@method{drawOn:} method. We draw the star as an ellipse with randomly
fluctuating x and y radius:

@smalltalkExampleCaption{A star with a fluctuating size, centralStarDraw,
CentralStar>>drawOn: canvas
   | radius |
   radius @assign{} self morphExtent // 2.
   canvas ellipseCenterX: 0
      y:  0
      rx: radius x + (2 atRandom - 1)
      ry: radius y + (2 atRandom - 1)
      borderWidth: 3 
      borderColor: Color orange 
      fillColor: Color yellow}

The star diameters in the x and y directions are fluctuating
independently of 0 to 2 units. The star does not look perfectly round.

@iftex
   @figure{A star with a fluctuating size,ch07-09-fluctuatingStar,5}
@end iftex

@ifhtml
   @figureExt{A star with a fluctuating size,ch07-09-fluctuatingStar,10,.gif}
@end ifhtml

@subsection Space ship
At the game start-up, the nose of the space ship is pointing to the
top of the screen as seen in @ref{ch07-10-ShipDiagram} and the angle
of its direction is therefore -90@textdegree{}, while the angle of its
rotation is 0@textdegree{}. Remember the Y ordinate are oriented
toward the bottom of the screen.

@figure{Space ship diagram at game start-up,ch07-10-ShipDiagram,4}

Given the vertices as seen in @ref{ch07-10-ShipDiagram}, the extent is
@smalltalk{20 @@ 30}:

@smalltalkExample{SpaceShip>>morphExtent
   @return{} `20 @@ 30`}

Then its @method{drawOn:} method is written as:

@smalltalkExampleCaption{Space ship drawing,spaceShipDrawing,
SpaceShip>>drawOn: canvas
   | a b c d |
   a @assign{} 0 @@ -15.
   b @assign{} -10 @@ 15.
   c @assign{} 0 @@ 10.
   d @assign{} 10 @@ 15.
   canvas line: a to: b width: 2 color: color.
   canvas line: b to: c width: 2 color: color.
   canvas line: c to: d width: 2 color: color.
   canvas line: d to: a width: 2 color: color.
   "Draw gas exhaust"
   acceleration ifNotZero: [
      canvas line: c to: 0 @@ 35 width: 1 color: Color gray]}

When there is an acceleration from the engine, we draw a small gray
line to represent the gas exhaust.

When the user turns the ship, the morph is rotated a bit by adjusting
its heading:

@smalltalkExample{SpaceShip>>right
"Rotate the ship to its right"
   self heading: self heading + 0.1

SpaceShip>>left
"Rotate the ship to its left"
   self heading: self heading - 0.1}


But how does this heading affect the rotation of the morph?

Underneath, the @class{MobileMorph} is equipped with an affine
transformation to scale, rotate and translate the coordinates passed
as arguments to the drawing messages received by the canvas.
Therefore, our @method{heading} methods are defined to match this
internal representation and we use the @method{rotation:} method from
the @class{PacedMorph} class to rotate appropriately. The
@smalltalk{location} attribute represents an affine transformation, and we
get its rotation angle with the @msg{radians} message.

@cindex morph @subentry @method{rotation:}
@cindex morph @subentry @smalltalk{location}
@smalltalkExample{Mobile>>heading
   @return{} location radians - Float halfPi
Mobile>>heading: aHeading
   self rotation: aHeading + Float halfPi}

When a mobile is vertical, pointing to the top of the screen, its
heading is -90@textdegree{} (-pi/2) in the screen coordinates
system. In that situation the mobile is not rotated -- or
0@textdegree{} rotated -- therefore we add 90@textdegree{} (pi/2) to
the heading to get the matching rotation angle of the mobile.

@subsection Torpedo

@c Give the diagram of the torpedo, and as an exercise ask how to code
@c its drawOn: and morphExtent methods

Alike a space ship, when a torpedo is just instantiated its nose
points in the direction of the top of the screen and its vertices are
given by the @ref{ch07-11-TorpedoDiagram}.

@figure{Torpedo diagram at game start-up,ch07-11-TorpedoDiagram,5}

@exercise{Torpedo extent, exeTorpedoExtent, @emph{Given the vertices
given by @ref{ch07-11-TorpedoDiagram}@comma{} how will you write its
@method{morphExtent} method?}}


@exercise{Torpedo drawing,exeTorpedoDrawing, @emph{How will you write
the @class{Torpedo}'s @method{drawOn:} method?}}


@subsection Drawing revisited

@cindex class @subentry instance variable @seeentry{variable}
@cindex variable @subentry class instance
@c refactoring of drawOn: explain class variable
As you may have observed, the @class{SpaceShip} and @class{Torpedo}
@method{drawOn:} methods share the same logic: drawing a polygon given
its vertices. We likely want to push this common logic to their common
ancestor, the @class{Mobile} class. It needs to know about its
vertices, so we may want to add an instance variable
@smalltalk{vertices} initialized in its subclasses with an array
containing the points:

@smalltalkExample{PlacedMorph subclass: #Mobile
   instanceVariableNames: 'acceleration color velocity vertices'
   classVariableNames: ''
   poolDictionaries: ''
   category: 'Spacewar!'

SpaceShip>>initialize
   super initialize.
   vertices @assign{} @{0@@-15 . -10@@15 . 0@@10 . 10@@15@}.
   self resupply
   
Torpedo>>initialize
   super initialize.
   vertices @assign{} @{0@@-4 . -2@@4 . 2@@4@}.
   lifeSpan @assign{} 500.
   acceleration @assign{} 3000}

However this is not a good idea. Imagine the game play with 200
torpedoes, the vertices array will be duplicated 200 times with the
same data!

@subsubheading Class instance variable

In that kind of situation, what you want is a @dfn{class instance
variable} defined in the class side -- in contrast to the instance
side where we have been coding until now.

We make use of the fact that all objects are instances of some class.
The  @class{Mobile class} is an instance of the class @class{Class}!

@enumerate

 @item A @dfn{class instance variable} can be accessed and assigned
 only by the class itself in a @dfn{class method}.

 @item An entity (i.e. a fired torpedo) can access class instance
 variables via @dfn{class methods}, by sending a message to a class
 (i.e. @class{Torpedo}) rather than to itself or some other entity.

 @item In the class hierarchy, each subclass has its own instance
 of the class instance variable, and can assign a different value to
 it -- in contrast with a @dfn{class variable} which is shared among
 all the subclasses (discussed later).

 @item To edit the @emph{class} instance variables and @emph{class}
 methods, in the System Browser press the @label{class} button under
 the class list.

@end enumerate

In the System Browser, we click the @label{class} button then we
declare our variable in the @class{Mobile class} definition --
@ref{ch07-12-browserClassSide}:

@smalltalkExampleCaption{@smalltalk{vertices} an instance variable in @class{Mobile class}, instanceVariableMobileClass,
Mobile class
   instanceVariableNames: 'vertices'}

Then we write an access method in the @class{Mobile class}, so
@class{SpaceShip} and @class{Torpedo} instances can access it:

@smalltalkExample{Mobile class>>vertices
   @return{} vertices}

@figure{The class side of the System Browser,ch07-12-browserClassSide,12}


@cindex class @subentry initialize
Next, each subclass is responsible to correctly initialize
@smalltalk{vertices} with its @method{initialize} class method:

@smalltalkExampleCaption{Initialize a class,initializeClass,
SpaceShip class>>initialize
"SpaceShip initialize"
   vertices @assign{}  @{0@@-15 . -10@@15 . 0@@10 . 10@@15@}

Torpedo class>>initialize
"Torpedo initialize"
   vertices @assign{} @{0@@-4 . -2@@4 . 2@@4@}}


When a class is installed in @cuis{}, its @method{initialize} class
method is executed. Alternatively select the comment and execute it
with @kbd{Ctrl-d}.

Experiment in a Workspace to understand how a class instance
variable behaves:

@smalltalkExampleCaption{A class instance variable value is not shared by the subclasses,classInstanceVar,
SpaceShip vertices.
@result{} nil 
SpaceShip initialize.
SpaceShip vertices.
@result{} #(0@@-15 -10@@15 0@@10 10@@15) 

Torpedo vertices.
@result{} nil 
Torpedo initialize.
Torpedo vertices.
@result{} #(0@@-4 -2@@4 2@@4)}

This is really the behavior we want: @class{SpaceShip} and
@class{Torpedo} instances have a different diagram. However, every
instances of a @class{SpaceShip} will have the same diagram, referring
to the same @smalltalk{vertices} array (i.e. same location in the
computer memory).

@cindex class @subentry @method{class}
Each instance asks its class side with the @msg{class} message:

@smalltalkExample{aTorpedo class
@result{} Torpedo
self class
@result{} SpaceShip}

The @class{Torpedo}'s @method{drawOn:} is rewritten to access the
vertices in its class side:

@smalltalkExample{Torpedo>>drawOn: canvas
   | vertices |
   vertices @assign{} self class vertices.
   canvas line: vertices first to: vertices second width: 2 color: color.
   canvas line: vertices third to: vertices second width: 2 color: color.
   canvas line: vertices first to: vertices third width: 2 color: color}

@exercise{Space ship access to its diagram in class side,exeSpaceShipClassSideDiagram,
@emph{How will you rewrite @class{SpaceShip}'s @method{drawOn:} to use the vertices in its class side?}}

So far, we still have this redundancy in the @method{drawOn:}
methods. What we want is @class{Mobile} to be responsible to draw the
polygon given a vertices array: @smalltalk{self drawOn: canvas
polygon: vertices}.

The @class{SpaceShip} and @class{Torpedo}'s @method{drawOn:} will then
be simply written as:

@smalltalkExample{Torpedo>>drawOn: canvas
   self drawOn: canvas polygon: self class vertices

SpaceShip>>drawOn: canvas
   | vertices |
   vertices @assign{} self class vertices.
   self drawOn: canvas polygon: vertices.
   "Draw gas exhaust"
   acceleration ifNotZero: [
      canvas line: vertices third to: 0@@35 width: 1 color: Color gray]}

@exercise{Draw on @class{Mobile},exeDrawMobile, @emph{How will you
write the @method{drawOn:polygon:} method in @class{Mobile}? Tip: use the
iterator @method{withIndexDo:}.}}

@c Explain the difference with class variable
@subsubheading Class variable
@cindex class @subentry variable @seeentry{variable}
@cindex variable @subentry class

A @dfn{class variable} is written capitalized in the argument of
@smalltalk{classVariableNames:} keyword:

@smalltalkExampleCaption{@smalltalk{Vertices} a class variable in @class{Mobile},classVariableMobile,
PlacedMorph subclass: #Mobile
   instanceVariableNames: 'acceleration color velocity'
   classVariableNames: 'Vertices'
   poolDictionaries: ''
   category: 'Spacewar!'}

As a class instance variable, it can be directly accessed from the
class side and instances are grant access only with messages send to
the class side. @strong{Contrary} to a class instance variable, its
value is common in the whole class hierarchy. 

In Spacewar!, a class variable @smalltalk{Vertices} will have the same
diagram for a space ship and a torpedo. This is not what we want.

@smalltalkExample{SpaceShip>>vertices
   @return{} `@{0@@-15 . -10@@15 . 0@@10 . 10@@15@}`}

@c it can be simpler
@subsection Drawing simplified
Using a class variable in the present game design is a bit
overkill. It was an excuse to present the concept of class
variables. If the game came with an editor where the user redesigns
the ship and torpedo diagrams, it would make sense to hold the vertices
in a variable. But our vertices of the space ship and torpedo diagrams
are constant. We do not modify them. As we did with the mass of the
space ship -- @ref{methodConstant} -- we can use a method returning a
collection, surrounded with backtricks to improve efficiency.

@smalltalkExampleCaption{Vertices returned by an instance method, verticesMethod,
SpaceShip>>vertices
   @return{} `@{0@@-15 . -10@@15 . 0@@10 . 10@@15@}`
   
Torpedo>>vertices
   @return{} `@{0@@-4 . -2@@4 . 2@@4@}`}

Then in the drawing methods, we replace @smalltalk{self class
vertices} by @smalltalk{self vertices}.

@c refactoring of collision with display bounds
@subsection Collisions revisited

VectorGraphics can detect morph collision at the pixel level. We are
not that fortunate when using the BitBlt canvas, we have to rely on
the rectangular morph extent.  The @msg{displayBounds} message is just
what we need: it answers the morph bounds in the display, a rectangle
encompassing the morph given its rotation and scale.

@figure{The display bounds of a space ship,ch07-13-shipDisplayBounds,7}

In @ref{shipSunCollision}, we have a very naive approach for collision
between the central star and the ships, based on distance between
morphs. It was very inaccurate. When browsing the @class{Rectangle}
class, you learn the @msg{intersects:} message can tell us if two
rectangles overlap. This is what we need for a more accurate collision
detection between the central star and the space ships:

@smalltalkExampleCaption{Collision (accurate) between the ships and
the Sun, accurateCollisionShipsSun,
SpaceWar>>collisionsShipsStar
   ships do: [:aShip | 
      (aShip displayBounds intersects: centralStar displayBounds) ifTrue: [
         aShip flashWith: Color red.
         self teleport: aShip]]}

@exercise{Accurate collision detection,exeAccurateDetection,
@emph{Rewrite the three collision detection methods between space ships, torpedoes and the central star.}}
